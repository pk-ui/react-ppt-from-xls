{"ast":null,"code":"'use strict';\n\nconst ColorXform = require('./color-xform');\n\nconst BooleanXform = require('../simple/boolean-xform');\n\nconst IntegerXform = require('../simple/integer-xform');\n\nconst StringXform = require('../simple/string-xform');\n\nconst UnderlineXform = require('./underline-xform');\n\nconst _ = require('../../../utils/under-dash');\n\nconst BaseXform = require('../base-xform'); // Font encapsulates translation from font model to xlsx\n\n\nclass FontXform extends BaseXform {\n  constructor(options) {\n    super();\n    this.options = options || FontXform.OPTIONS;\n    this.map = {\n      b: {\n        prop: 'bold',\n        xform: new BooleanXform({\n          tag: 'b',\n          attr: 'val'\n        })\n      },\n      i: {\n        prop: 'italic',\n        xform: new BooleanXform({\n          tag: 'i',\n          attr: 'val'\n        })\n      },\n      u: {\n        prop: 'underline',\n        xform: new UnderlineXform()\n      },\n      charset: {\n        prop: 'charset',\n        xform: new IntegerXform({\n          tag: 'charset',\n          attr: 'val'\n        })\n      },\n      color: {\n        prop: 'color',\n        xform: new ColorXform()\n      },\n      condense: {\n        prop: 'condense',\n        xform: new BooleanXform({\n          tag: 'condense',\n          attr: 'val'\n        })\n      },\n      extend: {\n        prop: 'extend',\n        xform: new BooleanXform({\n          tag: 'extend',\n          attr: 'val'\n        })\n      },\n      family: {\n        prop: 'family',\n        xform: new IntegerXform({\n          tag: 'family',\n          attr: 'val'\n        })\n      },\n      outline: {\n        prop: 'outline',\n        xform: new BooleanXform({\n          tag: 'outline',\n          attr: 'val'\n        })\n      },\n      vertAlign: {\n        prop: 'vertAlign',\n        xform: new StringXform({\n          tag: 'vertAlign',\n          attr: 'val'\n        })\n      },\n      scheme: {\n        prop: 'scheme',\n        xform: new StringXform({\n          tag: 'scheme',\n          attr: 'val'\n        })\n      },\n      shadow: {\n        prop: 'shadow',\n        xform: new BooleanXform({\n          tag: 'shadow',\n          attr: 'val'\n        })\n      },\n      strike: {\n        prop: 'strike',\n        xform: new BooleanXform({\n          tag: 'strike',\n          attr: 'val'\n        })\n      },\n      sz: {\n        prop: 'size',\n        xform: new IntegerXform({\n          tag: 'sz',\n          attr: 'val'\n        })\n      }\n    };\n    this.map[this.options.fontNameTag] = {\n      prop: 'name',\n      xform: new StringXform({\n        tag: this.options.fontNameTag,\n        attr: 'val'\n      })\n    };\n  }\n\n  get tag() {\n    return this.options.tagName;\n  }\n\n  render(xmlStream, model) {\n    const map = this.map;\n    xmlStream.openNode(this.options.tagName);\n\n    _.each(this.map, (defn, tag) => {\n      map[tag].xform.render(xmlStream, model[defn.prop]);\n    });\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    if (this.map[node.name]) {\n      this.parser = this.map[node.name].xform;\n      return this.parser.parseOpen(node);\n    }\n\n    switch (node.name) {\n      case this.options.tagName:\n        this.model = {};\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser && !this.parser.parseClose(name)) {\n      const item = this.map[name];\n\n      if (this.parser.model) {\n        this.model[item.prop] = this.parser.model;\n      }\n\n      this.parser = undefined;\n      return true;\n    }\n\n    switch (name) {\n      case this.options.tagName:\n        return false;\n\n      default:\n        return true;\n    }\n  }\n\n}\n\nFontXform.OPTIONS = {\n  tagName: 'font',\n  fontNameTag: 'name'\n};\nmodule.exports = FontXform;","map":null,"metadata":{},"sourceType":"script"}