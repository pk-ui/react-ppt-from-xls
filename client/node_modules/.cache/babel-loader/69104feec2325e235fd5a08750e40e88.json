{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nconst AlignmentXform = require('./alignment-xform'); // <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n// </xf>\n// Style assists translation from style model to/from xlsx\n\n\nclass StyleXform extends BaseXform {\n  constructor(options) {\n    super();\n    this.xfId = !!(options && options.xfId);\n    this.map = {\n      alignment: new AlignmentXform()\n    };\n  }\n\n  get tag() {\n    return 'xf';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode('xf', {\n      numFmtId: model.numFmtId || 0,\n      fontId: model.fontId || 0,\n      fillId: model.fillId || 0,\n      borderId: model.borderId || 0\n    });\n\n    if (this.xfId) {\n      xmlStream.addAttribute('xfId', model.xfId || 0);\n    }\n\n    if (model.numFmtId) {\n      xmlStream.addAttribute('applyNumberFormat', '1');\n    }\n\n    if (model.fontId) {\n      xmlStream.addAttribute('applyFont', '1');\n    }\n\n    if (model.fillId) {\n      xmlStream.addAttribute('applyFill', '1');\n    }\n\n    if (model.borderId) {\n      xmlStream.addAttribute('applyBorder', '1');\n    }\n\n    if (model.alignment) {\n      xmlStream.addAttribute('applyAlignment', '1');\n      this.map.alignment.render(xmlStream, model.alignment);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    } // used during sax parsing of xml to build font object\n\n\n    switch (node.name) {\n      case 'xf':\n        this.model = {\n          numFmtId: parseInt(node.attributes.numFmtId, 10),\n          fontId: parseInt(node.attributes.fontId, 10),\n          fillId: parseInt(node.attributes.fillId, 10),\n          borderId: parseInt(node.attributes.borderId, 10)\n        };\n\n        if (this.xfId) {\n          this.model.xfId = parseInt(node.attributes.xfId, 10);\n        }\n\n        return true;\n\n      case 'alignment':\n        this.parser = this.map.alignment;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.alignment = this.parser.model;\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    return name !== 'xf';\n  }\n\n}\n\nmodule.exports = StyleXform;","map":null,"metadata":{},"sourceType":"script"}