{"ast":null,"code":"const _ = require('./under-dash');\n\nconst colCache = require('./col-cache');\n\nclass CellMatrix {\n  constructor(template) {\n    this.template = template;\n    this.sheets = {};\n  }\n\n  addCell(addressStr) {\n    this.addCellEx(colCache.decodeEx(addressStr));\n  }\n\n  getCell(addressStr) {\n    return this.findCellEx(colCache.decodeEx(addressStr), true);\n  }\n\n  findCell(addressStr) {\n    return this.findCellEx(colCache.decodeEx(addressStr), false);\n  }\n\n  findCellAt(sheetName, rowNumber, colNumber) {\n    const sheet = this.sheets[sheetName];\n    const row = sheet && sheet[rowNumber];\n    return row && row[colNumber];\n  }\n\n  addCellEx(address) {\n    if (address.top) {\n      for (let row = address.top; row <= address.bottom; row++) {\n        for (let col = address.left; col <= address.right; col++) {\n          this.getCellAt(address.sheetName, row, col);\n        }\n      }\n    } else {\n      this.findCellEx(address, true);\n    }\n  }\n\n  getCellEx(address) {\n    return this.findCellEx(address, true);\n  }\n\n  findCellEx(address, create) {\n    const sheet = this.findSheet(address, create);\n    const row = this.findSheetRow(sheet, address, create);\n    return this.findRowCell(row, address, create);\n  }\n\n  getCellAt(sheetName, rowNumber, colNumber) {\n    const sheet = this.sheets[sheetName] || (this.sheets[sheetName] = []);\n    const row = sheet[rowNumber] || (sheet[rowNumber] = []);\n    const cell = row[colNumber] || (row[colNumber] = {\n      sheetName,\n      address: colCache.n2l(colNumber) + rowNumber,\n      row: rowNumber,\n      col: colNumber\n    });\n    return cell;\n  }\n\n  removeCellEx(address) {\n    const sheet = this.findSheet(address);\n\n    if (!sheet) {\n      return;\n    }\n\n    const row = this.findSheetRow(sheet, address);\n\n    if (!row) {\n      return;\n    }\n\n    delete row[address.col];\n  }\n\n  forEachInSheet(sheetName, callback) {\n    const sheet = this.sheets[sheetName];\n\n    if (sheet) {\n      sheet.forEach((row, rowNumber) => {\n        if (row) {\n          row.forEach((cell, colNumber) => {\n            if (cell) {\n              callback(cell, rowNumber, colNumber);\n            }\n          });\n        }\n      });\n    }\n  }\n\n  forEach(callback) {\n    _.each(this.sheets, (sheet, sheetName) => {\n      this.forEachInSheet(sheetName, callback);\n    });\n  }\n\n  map(callback) {\n    const results = [];\n    this.forEach(cell => {\n      results.push(callback(cell));\n    });\n    return results;\n  }\n\n  findSheet(address, create) {\n    const name = address.sheetName;\n\n    if (this.sheets[name]) {\n      return this.sheets[name];\n    }\n\n    if (create) {\n      return this.sheets[name] = [];\n    }\n\n    return undefined;\n  }\n\n  findSheetRow(sheet, address, create) {\n    const row = address.row;\n\n    if (sheet && sheet[row]) {\n      return sheet[row];\n    }\n\n    if (create) {\n      return sheet[row] = [];\n    }\n\n    return undefined;\n  }\n\n  findRowCell(row, address, create) {\n    const col = address.col;\n\n    if (row && row[col]) {\n      return row[col];\n    }\n\n    if (create) {\n      return row[col] = this.template ? Object.assign(address, JSON.parse(JSON.stringify(this.template))) : address;\n    }\n\n    return undefined;\n  }\n\n  spliceRows(sheetName, start, numDelete, numInsert) {\n    const sheet = this.sheets[sheetName];\n\n    if (sheet) {\n      const inserts = [];\n\n      for (let i = 0; i < numInsert; i++) {\n        inserts.push([]);\n      }\n\n      sheet.splice(start, numDelete, ...inserts);\n    }\n  }\n\n  spliceColumns(sheetName, start, numDelete, numInsert) {\n    const sheet = this.sheets[sheetName];\n\n    if (sheet) {\n      const inserts = [];\n\n      for (let i = 0; i < numInsert; i++) {\n        inserts.push(null);\n      }\n\n      _.each(sheet, row => {\n        row.splice(start, numDelete, ...inserts);\n      });\n    }\n  }\n\n}\n\nmodule.exports = CellMatrix;","map":null,"metadata":{},"sourceType":"script"}