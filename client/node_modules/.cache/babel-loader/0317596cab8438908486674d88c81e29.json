{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nclass ColXform extends BaseXform {\n  get tag() {\n    return 'col';\n  }\n\n  prepare(model, options) {\n    const styleId = options.styles.addStyleModel(model.style || {});\n\n    if (styleId) {\n      model.styleId = styleId;\n    }\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode('col');\n    xmlStream.addAttribute('min', model.min);\n    xmlStream.addAttribute('max', model.max);\n\n    if (model.width) {\n      xmlStream.addAttribute('width', model.width);\n    }\n\n    if (model.styleId) {\n      xmlStream.addAttribute('style', model.styleId);\n    }\n\n    if (model.hidden) {\n      xmlStream.addAttribute('hidden', '1');\n    }\n\n    if (model.bestFit) {\n      xmlStream.addAttribute('bestFit', '1');\n    }\n\n    if (model.outlineLevel) {\n      xmlStream.addAttribute('outlineLevel', model.outlineLevel);\n    }\n\n    if (model.collapsed) {\n      xmlStream.addAttribute('collapsed', '1');\n    }\n\n    xmlStream.addAttribute('customWidth', '1');\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (node.name === 'col') {\n      const model = this.model = {\n        min: parseInt(node.attributes.min || '0', 10),\n        max: parseInt(node.attributes.max || '0', 10),\n        width: node.attributes.width === undefined ? undefined : parseFloat(node.attributes.width || '0')\n      };\n\n      if (node.attributes.style) {\n        model.styleId = parseInt(node.attributes.style, 10);\n      }\n\n      if (node.attributes.hidden) {\n        model.hidden = true;\n      }\n\n      if (node.attributes.bestFit) {\n        model.bestFit = true;\n      }\n\n      if (node.attributes.outlineLevel) {\n        model.outlineLevel = parseInt(node.attributes.outlineLevel, 10);\n      }\n\n      if (node.attributes.collapsed) {\n        model.collapsed = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseText() {}\n\n  parseClose() {\n    return false;\n  }\n\n  reconcile(model, options) {\n    // reconcile column styles\n    if (model.styleId) {\n      model.style = options.styles.getStyleModel(model.styleId);\n    }\n  }\n\n}\n\nmodule.exports = ColXform;","map":null,"metadata":{},"sourceType":"script"}