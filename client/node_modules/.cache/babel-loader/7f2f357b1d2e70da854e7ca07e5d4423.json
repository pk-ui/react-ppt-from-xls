{"ast":null,"code":"const RichTextXform = require('../strings/rich-text-xform');\n\nconst utils = require('../../../utils/utils');\n\nconst BaseXform = require('../base-xform');\n/**\n  <comment ref=\"B1\" authorId=\"0\">\n    <text>\n      <r>\n        <rPr>\n          <b/>\n          <sz val=\"9\"/>\n          <rFont val=\"宋体\"/>\n          <charset val=\"134\"/>\n        </rPr>\n        <t>51422:</t>\n      </r>\n      <r>\n        <rPr>\n          <sz val=\"9\"/>\n          <rFont val=\"宋体\"/>\n          <charset val=\"134\"/>\n        </rPr>\n        <t xml:space=\"preserve\">&#10;test</t>\n      </r>\n    </text>\n  </comment>\n */\n\n\nconst CommentXform = module.exports = function (model) {\n  this.model = model;\n};\n\nutils.inherits(CommentXform, BaseXform, {\n  get tag() {\n    return 'r';\n  },\n\n  get richTextXform() {\n    if (!this._richTextXform) {\n      this._richTextXform = new RichTextXform();\n    }\n\n    return this._richTextXform;\n  },\n\n  render(xmlStream, model) {\n    model = model || this.model;\n    xmlStream.openNode('comment', {\n      ref: model.ref,\n      authorId: 0\n    });\n    xmlStream.openNode('text');\n\n    if (model && model.note && model.note.texts) {\n      model.note.texts.forEach(text => {\n        this.richTextXform.render(xmlStream, text);\n      });\n    }\n\n    xmlStream.closeNode();\n    xmlStream.closeNode();\n  },\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'comment':\n        this.model = {\n          texts: [],\n          ...node.attributes\n        };\n        return true;\n\n      case 'r':\n        this.parser = this.richTextXform;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  },\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  },\n\n  parseClose(name) {\n    switch (name) {\n      case 'comment':\n        return false;\n\n      case 'r':\n        this.model.texts.push(this.parser.model);\n        this.parser = undefined;\n        return true;\n\n      default:\n        if (this.parser) {\n          this.parser.parseClose(name);\n        }\n\n        return true;\n    }\n  }\n\n});","map":null,"metadata":{},"sourceType":"script"}