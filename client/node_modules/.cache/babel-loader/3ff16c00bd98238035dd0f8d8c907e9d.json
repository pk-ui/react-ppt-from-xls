{"ast":null,"code":"var fs = require(\"fs\"),\n    util = require(\"util\"),\n    extended = require(\"../extended\"),\n    Buffer = require('safer-buffer').Buffer,\n    escape = extended.escape,\n    isArray = extended.isArray,\n    has = extended.has,\n    stream = require(\"stream\"),\n    Transform = stream.Transform,\n    LINE_BREAK = extended.LINE_BREAK,\n    formatter = require(\"./formatter\"),\n    createFormatter = formatter.createFormatter,\n    checkHeaders = formatter.checkHeaders,\n    transformItem = formatter.transformItem,\n    defaultTransform = formatter.defaultTransform;\n\nfunction CsvTransformStream(options) {\n  options = options || {};\n  options.objectMode = true;\n\n  if (has(options, \"transform\")) {\n    // remove so its not set to _transform in Transform constructor\n    options.consumerTransform = options.transform;\n    delete options.transform;\n  }\n\n  Transform.call(this, options);\n  this.formatter = createFormatter(options, this);\n  this.rowDelimiter = options.rowDelimiter || \"\\n\";\n  var hasHeaders = has(options, \"headers\") ? !!options.headers : null,\n      headers = hasHeaders && isArray(options.headers) ? options.headers : null;\n  this.hasHeaders = hasHeaders;\n  this.headers = headers;\n\n  if (hasHeaders) {\n    if (headers) {\n      this.parsedHeaders = true;\n      this.headersLength = headers.length;\n    } else {\n      this.parsedHeaders = false;\n    }\n  }\n\n  this.hasWrittenHeaders = hasHeaders ? false : true;\n  this.includeEndRowDelimiter = !!options.includeEndRowDelimiter, has(options, \"consumerTransform\") && this.transform(options.consumerTransform);\n}\n\nutil.inherits(CsvTransformStream, Transform);\nextended(CsvTransformStream).extend({\n  headers: null,\n  headersLength: 0,\n  totalCount: 0,\n  _transform: function (item, encoding, cb) {\n    var self = this;\n\n    this.__transform(item, function (err, item) {\n      if (err) {\n        cb(err);\n      } else {\n        if (checkHeaders(self, item)) {\n          self.push(Buffer.from(transformItem(self, item), \"utf8\"));\n        }\n\n        cb();\n      }\n    });\n  },\n  __transform: defaultTransform,\n  transform: function (cb) {\n    if (!extended.isFunction(cb)) {\n      this.emit(\"error\", new TypeError(\"fast-csv.FormatterStream#transform requires a function\"));\n    }\n\n    if (cb.length === 2) {\n      this.__transform = cb;\n    } else {\n      this.__transform = function (data, next) {\n        next(null, cb(data));\n      };\n    }\n\n    return this;\n  },\n  _flush: function (cb) {\n    if (this.includeEndRowDelimiter) {\n      this.push(this.rowDelimiter);\n    }\n\n    cb();\n  }\n});\nmodule.exports = CsvTransformStream;","map":null,"metadata":{},"sourceType":"script"}