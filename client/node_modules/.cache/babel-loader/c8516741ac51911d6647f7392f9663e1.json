{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  function defineDate(extended, is, array) {\n    function _pad(string, length, ch, end) {\n      string = \"\" + string; //check for numbers\n\n      ch = ch || \" \";\n      var strLen = string.length;\n\n      while (strLen < length) {\n        if (end) {\n          string += ch;\n        } else {\n          string = ch + string;\n        }\n\n        strLen++;\n      }\n\n      return string;\n    }\n\n    function _truncate(string, length, end) {\n      var ret = string;\n\n      if (is.isString(ret)) {\n        if (string.length > length) {\n          if (end) {\n            var l = string.length;\n            ret = string.substring(l - length, l);\n          } else {\n            ret = string.substring(0, length);\n          }\n        }\n      } else {\n        ret = _truncate(\"\" + ret, length);\n      }\n\n      return ret;\n    }\n\n    function every(arr, iterator, scope) {\n      if (!is.isArray(arr) || typeof iterator !== \"function\") {\n        throw new TypeError();\n      }\n\n      var t = Object(arr);\n      var len = t.length >>> 0;\n\n      for (var i = 0; i < len; i++) {\n        if (i in t && !iterator.call(scope, t[i], i, t)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    var transforms = function () {\n      var floor = Math.floor,\n          round = Math.round;\n      var addMap = {\n        day: function addDay(date, amount) {\n          return [amount, \"Date\", false];\n        },\n        weekday: function addWeekday(date, amount) {\n          // Divide the increment time span into weekspans plus leftover days\n          // e.g., 8 days is one 5-day weekspan / and two leftover days\n          // Can't have zero leftover days, so numbers divisible by 5 get\n          // a days value of 5, and the remaining days make up the number of weeks\n          var days,\n              weeks,\n              mod = amount % 5,\n              strt = date.getDay(),\n              adj = 0;\n\n          if (!mod) {\n            days = amount > 0 ? 5 : -5;\n            weeks = amount > 0 ? (amount - 5) / 5 : (amount + 5) / 5;\n          } else {\n            days = mod;\n            weeks = parseInt(amount / 5, 10);\n          }\n\n          if (strt === 6 && amount > 0) {\n            adj = 1;\n          } else if (strt === 0 && amount < 0) {\n            // Orig date is Sun / negative increment\n            // Jump back over Sat\n            adj = -1;\n          } // Get weekday val for the new date\n\n\n          var trgt = strt + days; // New date is on Sat or Sun\n\n          if (trgt === 0 || trgt === 6) {\n            adj = amount > 0 ? 2 : -2;\n          } // Increment by number of weeks plus leftover days plus\n          // weekend adjustments\n\n\n          return [7 * weeks + days + adj, \"Date\", false];\n        },\n        year: function addYear(date, amount) {\n          return [amount, \"FullYear\", true];\n        },\n        week: function addWeek(date, amount) {\n          return [amount * 7, \"Date\", false];\n        },\n        quarter: function addYear(date, amount) {\n          return [amount * 3, \"Month\", true];\n        },\n        month: function addYear(date, amount) {\n          return [amount, \"Month\", true];\n        }\n      };\n\n      function addTransform(interval, date, amount) {\n        interval = interval.replace(/s$/, \"\");\n\n        if (addMap.hasOwnProperty(interval)) {\n          return addMap[interval](date, amount);\n        }\n\n        return [amount, \"UTC\" + interval.charAt(0).toUpperCase() + interval.substring(1) + \"s\", false];\n      }\n\n      var differenceMap = {\n        \"quarter\": function quarterDifference(date1, date2, utc) {\n          var yearDiff = date2.getFullYear() - date1.getFullYear();\n          var m1 = date1[utc ? \"getUTCMonth\" : \"getMonth\"]();\n          var m2 = date2[utc ? \"getUTCMonth\" : \"getMonth\"](); // Figure out which quarter the months are in\n\n          var q1 = floor(m1 / 3) + 1;\n          var q2 = floor(m2 / 3) + 1; // Add quarters for any year difference between the dates\n\n          q2 += yearDiff * 4;\n          return q2 - q1;\n        },\n        \"weekday\": function weekdayDifference(date1, date2, utc) {\n          var days = differenceTransform(\"day\", date1, date2, utc),\n              weeks;\n          var mod = days % 7; // Even number of weeks\n\n          if (mod === 0) {\n            days = differenceTransform(\"week\", date1, date2, utc) * 5;\n          } else {\n            // Weeks plus spare change (< 7 days)\n            var adj = 0,\n                aDay = date1[utc ? \"getUTCDay\" : \"getDay\"](),\n                bDay = date2[utc ? \"getUTCDay\" : \"getDay\"]();\n            weeks = parseInt(days / 7, 10); // Mark the date advanced by the number of\n            // round weeks (may be zero)\n\n            var dtMark = new Date(+date1);\n            dtMark.setDate(dtMark[utc ? \"getUTCDate\" : \"getDate\"]() + weeks * 7);\n            var dayMark = dtMark[utc ? \"getUTCDay\" : \"getDay\"](); // Spare change days -- 6 or less\n\n            if (days > 0) {\n              if (aDay === 6 || bDay === 6) {\n                adj = -1;\n              } else if (aDay === 0) {\n                adj = 0;\n              } else if (bDay === 0 || dayMark + mod > 5) {\n                adj = -2;\n              }\n            } else if (days < 0) {\n              if (aDay === 6) {\n                adj = 0;\n              } else if (aDay === 0 || bDay === 0) {\n                adj = 1;\n              } else if (bDay === 6 || dayMark + mod < 0) {\n                adj = 2;\n              }\n            }\n\n            days += adj;\n            days -= weeks * 2;\n          }\n\n          return days;\n        },\n        year: function (date1, date2) {\n          return date2.getFullYear() - date1.getFullYear();\n        },\n        month: function (date1, date2, utc) {\n          var m1 = date1[utc ? \"getUTCMonth\" : \"getMonth\"]();\n          var m2 = date2[utc ? \"getUTCMonth\" : \"getMonth\"]();\n          return m2 - m1 + (date2.getFullYear() - date1.getFullYear()) * 12;\n        },\n        week: function (date1, date2, utc) {\n          return round(differenceTransform(\"day\", date1, date2, utc) / 7);\n        },\n        day: function (date1, date2) {\n          return 1.1574074074074074e-8 * (date2.getTime() - date1.getTime());\n        },\n        hour: function (date1, date2) {\n          return 2.7777777777777776e-7 * (date2.getTime() - date1.getTime());\n        },\n        minute: function (date1, date2) {\n          return 0.000016666666666666667 * (date2.getTime() - date1.getTime());\n        },\n        second: function (date1, date2) {\n          return 0.001 * (date2.getTime() - date1.getTime());\n        },\n        millisecond: function (date1, date2) {\n          return date2.getTime() - date1.getTime();\n        }\n      };\n\n      function differenceTransform(interval, date1, date2, utc) {\n        interval = interval.replace(/s$/, \"\");\n        return round(differenceMap[interval](date1, date2, utc));\n      }\n\n      return {\n        addTransform: addTransform,\n        differenceTransform: differenceTransform\n      };\n    }(),\n        addTransform = transforms.addTransform,\n        differenceTransform = transforms.differenceTransform;\n    /**\n     * @ignore\n     * Based on DOJO Date Implementation\n     *\n     * Dojo is available under *either* the terms of the modified BSD license *or* the\n     * Academic Free License version 2.1. As a recipient of Dojo, you may choose which\n     * license to receive this code under (except as noted in per-module LICENSE\n     * files). Some modules may not be the copyright of the Dojo Foundation. These\n     * modules contain explicit declarations of copyright in both the LICENSE files in\n     * the directories in which they reside and in the code itself. No external\n     * contributions are allowed under licenses which are fundamentally incompatible\n     * with the AFL or BSD licenses that Dojo is distributed under.\n     *\n     */\n\n\n    var floor = Math.floor,\n        round = Math.round,\n        min = Math.min,\n        pow = Math.pow,\n        ceil = Math.ceil,\n        abs = Math.abs;\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var monthAbbr = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May.\", \"Jun.\", \"Jul.\", \"Aug.\", \"Sep.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n    var dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    var dayAbbr = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    var eraNames = [\"Before Christ\", \"Anno Domini\"];\n    var eraAbbr = [\"BC\", \"AD\"];\n\n    function getDayOfYear(\n    /*Date*/\n    dateObject, utc) {\n      // summary: gets the day of the year as represented by dateObject\n      return date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject, null, utc) + 1; // Number\n    }\n\n    function getWeekOfYear(\n    /*Date*/\n    dateObject,\n    /*Number*/\n    firstDayOfWeek, utc) {\n      firstDayOfWeek = firstDayOfWeek || 0;\n      var fullYear = dateObject[utc ? \"getUTCFullYear\" : \"getFullYear\"]();\n      var firstDayOfYear = new Date(fullYear, 0, 1).getDay(),\n          adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,\n          week = floor((getDayOfYear(dateObject) + adj - 1) / 7); // if year starts on the specified day, start counting weeks at 1\n\n      if (firstDayOfYear === firstDayOfWeek) {\n        week++;\n      }\n\n      return week; // Number\n    }\n\n    function getTimezoneName(\n    /*Date*/\n    dateObject) {\n      var str = dateObject.toString();\n      var tz = '';\n      var pos = str.indexOf('(');\n\n      if (pos > -1) {\n        tz = str.substring(++pos, str.indexOf(')'));\n      }\n\n      return tz; // String\n    }\n\n    function buildDateEXP(pattern, tokens) {\n      return pattern.replace(/([a-z])\\1*/ig, function (match) {\n        // Build a simple regexp.  Avoid captures, which would ruin the tokens list\n        var s,\n            c = match.charAt(0),\n            l = match.length,\n            p2 = '0?',\n            p3 = '0{0,2}';\n\n        if (c === 'y') {\n          s = '\\\\d{2,4}';\n        } else if (c === \"M\") {\n          s = l > 2 ? '\\\\S+?' : '1[0-2]|' + p2 + '[1-9]';\n        } else if (c === \"D\") {\n          s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|' + p3 + '[1-9][0-9]|' + p2 + '[1-9]';\n        } else if (c === \"d\") {\n          s = '3[01]|[12]\\\\d|' + p2 + '[1-9]';\n        } else if (c === \"w\") {\n          s = '[1-4][0-9]|5[0-3]|' + p2 + '[1-9]';\n        } else if (c === \"E\") {\n          s = '\\\\S+';\n        } else if (c === \"h\") {\n          s = '1[0-2]|' + p2 + '[1-9]';\n        } else if (c === \"K\") {\n          s = '1[01]|' + p2 + '\\\\d';\n        } else if (c === \"H\") {\n          s = '1\\\\d|2[0-3]|' + p2 + '\\\\d';\n        } else if (c === \"k\") {\n          s = '1\\\\d|2[0-4]|' + p2 + '[1-9]';\n        } else if (c === \"m\" || c === \"s\") {\n          s = '[0-5]\\\\d';\n        } else if (c === \"S\") {\n          s = '\\\\d{' + l + '}';\n        } else if (c === \"a\") {\n          var am = 'AM',\n              pm = 'PM';\n          s = am + '|' + pm;\n\n          if (am !== am.toLowerCase()) {\n            s += '|' + am.toLowerCase();\n          }\n\n          if (pm !== pm.toLowerCase()) {\n            s += '|' + pm.toLowerCase();\n          }\n\n          s = s.replace(/\\./g, \"\\\\.\");\n        } else if (c === 'v' || c === 'z' || c === 'Z' || c === 'G' || c === 'q' || c === 'Q') {\n          s = \".*\";\n        } else {\n          s = c === \" \" ? \"\\\\s*\" : c + \"*\";\n        }\n\n        if (tokens) {\n          tokens.push(match);\n        }\n\n        return \"(\" + s + \")\"; // add capture\n      }).replace(/[\\xa0 ]/g, \"[\\\\s\\\\xa0]\"); // normalize whitespace.  Need explicit handling of \\xa0 for IE.\n    }\n    /**\n     * @namespace Utilities for Dates\n     */\n\n\n    var date = {\n      /**@lends date*/\n\n      /**\n       * Returns the number of days in the month of a date\n       *\n       * @example\n       *\n       *  dateExtender.getDaysInMonth(new Date(2006, 1, 1)); //28\n       *  dateExtender.getDaysInMonth(new Date(2004, 1, 1)); //29\n       *  dateExtender.getDaysInMonth(new Date(2006, 2, 1)); //31\n       *  dateExtender.getDaysInMonth(new Date(2006, 3, 1)); //30\n       *  dateExtender.getDaysInMonth(new Date(2006, 4, 1)); //31\n       *  dateExtender.getDaysInMonth(new Date(2006, 5, 1)); //30\n       *  dateExtender.getDaysInMonth(new Date(2006, 6, 1)); //31\n       * @param {Date} dateObject the date containing the month\n       * @return {Number} the number of days in the month\n       */\n      getDaysInMonth: function (\n      /*Date*/\n      dateObject) {\n        //\tsummary:\n        //\t\tReturns the number of days in the month used by dateObject\n        var month = dateObject.getMonth();\n        var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        if (month === 1 && date.isLeapYear(dateObject)) {\n          return 29;\n        } // Number\n\n\n        return days[month]; // Number\n      },\n\n      /**\n       * Determines if a date is a leap year\n       *\n       * @example\n       *\n       *  dateExtender.isLeapYear(new Date(1600, 0, 1)); //true\n       *  dateExtender.isLeapYear(new Date(2004, 0, 1)); //true\n       *  dateExtender.isLeapYear(new Date(2000, 0, 1)); //true\n       *  dateExtender.isLeapYear(new Date(2006, 0, 1)); //false\n       *  dateExtender.isLeapYear(new Date(1900, 0, 1)); //false\n       *  dateExtender.isLeapYear(new Date(1800, 0, 1)); //false\n       *  dateExtender.isLeapYear(new Date(1700, 0, 1)); //false\n       *\n       * @param {Date} dateObject\n       * @returns {Boolean} true if it is a leap year false otherwise\n       */\n      isLeapYear: function (\n      /*Date*/\n      dateObject, utc) {\n        var year = dateObject[utc ? \"getUTCFullYear\" : \"getFullYear\"]();\n        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n      },\n\n      /**\n       * Determines if a date is on a weekend\n       *\n       * @example\n       *\n       * var thursday = new Date(2006, 8, 21);\n       * var saturday = new Date(2006, 8, 23);\n       * var sunday = new Date(2006, 8, 24);\n       * var monday = new Date(2006, 8, 25);\n       * dateExtender.isWeekend(thursday)); //false\n       * dateExtender.isWeekend(saturday); //true\n       * dateExtender.isWeekend(sunday); //true\n       * dateExtender.isWeekend(monday)); //false\n       *\n       * @param {Date} dateObject the date to test\n       *\n       * @returns {Boolean} true if the date is a weekend\n       */\n      isWeekend: function (\n      /*Date?*/\n      dateObject, utc) {\n        // summary:\n        //\tDetermines if the date falls on a weekend, according to local custom.\n        var day = (dateObject || new Date())[utc ? \"getUTCDay\" : \"getDay\"]();\n        return day === 0 || day === 6;\n      },\n\n      /**\n       * Get the timezone of a date\n       *\n       * @example\n       *  //just setting the strLocal to simulate the toString() of a date\n       *  dt.str = 'Sun Sep 17 2006 22:25:51 GMT-0500 (CDT)';\n       *  //just setting the strLocal to simulate the locale\n       *  dt.strLocale = 'Sun 17 Sep 2006 10:25:51 PM CDT';\n       *  dateExtender.getTimezoneName(dt); //'CDT'\n       *  dt.str = 'Sun Sep 17 2006 22:57:18 GMT-0500 (CDT)';\n       *  dt.strLocale = 'Sun Sep 17 22:57:18 2006';\n       *  dateExtender.getTimezoneName(dt); //'CDT'\n       * @param dateObject the date to get the timezone from\n       *\n       * @returns {String} the timezone of the date\n       */\n      getTimezoneName: getTimezoneName,\n\n      /**\n       * Compares two dates\n       *\n       * @example\n       *\n       * var d1 = new Date();\n       * d1.setHours(0);\n       * dateExtender.compare(d1, d1); // 0\n       *\n       *  var d1 = new Date();\n       *  d1.setHours(0);\n       *  var d2 = new Date();\n       *  d2.setFullYear(2005);\n       *  d2.setHours(12);\n       *  dateExtender.compare(d1, d2, \"date\"); // 1\n       *  dateExtender.compare(d1, d2, \"datetime\"); // 1\n       *\n       *  var d1 = new Date();\n       *  d1.setHours(0);\n       *  var d2 = new Date();\n       *  d2.setFullYear(2005);\n       *  d2.setHours(12);\n       *  dateExtender.compare(d2, d1, \"date\"); // -1\n       *  dateExtender.compare(d1, d2, \"time\"); //-1\n       *\n       * @param {Date|String} date1 the date to comapare\n       * @param {Date|String} [date2=new Date()] the date to compare date1 againse\n       * @param {\"date\"|\"time\"|\"datetime\"} portion compares the portion specified\n       *\n       * @returns -1 if date1 is < date2 0 if date1 === date2  1 if date1 > date2\n       */\n      compare: function (\n      /*Date*/\n      date1,\n      /*Date*/\n      date2,\n      /*String*/\n      portion) {\n        date1 = new Date(+date1);\n        date2 = new Date(+(date2 || new Date()));\n\n        if (portion === \"date\") {\n          // Ignore times and compare dates.\n          date1.setHours(0, 0, 0, 0);\n          date2.setHours(0, 0, 0, 0);\n        } else if (portion === \"time\") {\n          // Ignore dates and compare times.\n          date1.setFullYear(0, 0, 0);\n          date2.setFullYear(0, 0, 0);\n        }\n\n        return date1 > date2 ? 1 : date1 < date2 ? -1 : 0;\n      },\n\n      /**\n       * Adds a specified interval and amount to a date\n       *\n       * @example\n       *  var dtA = new Date(2005, 11, 27);\n       *  dateExtender.add(dtA, \"year\", 1); //new Date(2006, 11, 27);\n       *  dateExtender.add(dtA, \"years\", 1); //new Date(2006, 11, 27);\n       *\n       *  dtA = new Date(2000, 0, 1);\n       *  dateExtender.add(dtA, \"quarter\", 1); //new Date(2000, 3, 1);\n       *  dateExtender.add(dtA, \"quarters\", 1); //new Date(2000, 3, 1);\n       *\n       *  dtA = new Date(2000, 0, 1);\n       *  dateExtender.add(dtA, \"month\", 1); //new Date(2000, 1, 1);\n       *  dateExtender.add(dtA, \"months\", 1); //new Date(2000, 1, 1);\n       *\n       *  dtA = new Date(2000, 0, 31);\n       *  dateExtender.add(dtA, \"month\", 1); //new Date(2000, 1, 29);\n       *  dateExtender.add(dtA, \"months\", 1); //new Date(2000, 1, 29);\n       *\n       *  dtA = new Date(2000, 0, 1);\n       *  dateExtender.add(dtA, \"week\", 1); //new Date(2000, 0, 8);\n       *  dateExtender.add(dtA, \"weeks\", 1); //new Date(2000, 0, 8);\n       *\n       *  dtA = new Date(2000, 0, 1);\n       *  dateExtender.add(dtA, \"day\", 1); //new Date(2000, 0, 2);\n       *\n       *  dtA = new Date(2000, 0, 1);\n       *  dateExtender.add(dtA, \"weekday\", 1); //new Date(2000, 0, 3);\n       *\n       *  dtA = new Date(2000, 0, 1, 11);\n       *  dateExtender.add(dtA, \"hour\", 1); //new Date(2000, 0, 1, 12);\n       *\n       *  dtA = new Date(2000, 11, 31, 23, 59);\n       *  dateExtender.add(dtA, \"minute\", 1); //new Date(2001, 0, 1, 0, 0);\n       *\n       *  dtA = new Date(2000, 11, 31, 23, 59, 59);\n       *  dateExtender.add(dtA, \"second\", 1); //new Date(2001, 0, 1, 0, 0, 0);\n       *\n       *  dtA = new Date(2000, 11, 31, 23, 59, 59, 999);\n       *  dateExtender.add(dtA, \"millisecond\", 1); //new Date(2001, 0, 1, 0, 0, 0, 0);\n       *\n       * @param {Date} date\n       * @param {String} interval the interval to add\n       *  <ul>\n       *      <li>day | days</li>\n       *      <li>weekday | weekdays</li>\n       *      <li>year | years</li>\n       *      <li>week | weeks</li>\n       *      <li>quarter | quarters</li>\n       *      <li>months | months</li>\n       *      <li>hour | hours</li>\n       *      <li>minute | minutes</li>\n       *      <li>second | seconds</li>\n       *      <li>millisecond | milliseconds</li>\n       *  </ul>\n       * @param {Number} [amount=0] the amount to add\n       */\n      add: function (\n      /*Date*/\n      date,\n      /*String*/\n      interval,\n      /*int*/\n      amount) {\n        var res = addTransform(interval, date, amount || 0);\n        amount = res[0];\n        var property = res[1];\n        var sum = new Date(+date);\n        var fixOvershoot = res[2];\n\n        if (property) {\n          sum[\"set\" + property](sum[\"get\" + property]() + amount);\n        }\n\n        if (fixOvershoot && sum.getDate() < date.getDate()) {\n          sum.setDate(0);\n        }\n\n        return sum; // Date\n      },\n\n      /**\n       * Finds the difference between two dates based on the specified interval\n       *\n       * @example\n       *\n       * var dtA, dtB;\n       *\n       * dtA = new Date(2005, 11, 27);\n       * dtB = new Date(2006, 11, 27);\n       * dateExtender.difference(dtA, dtB, \"year\"); //1\n       *\n       * dtA = new Date(2000, 1, 29);\n       * dtB = new Date(2001, 2, 1);\n       * dateExtender.difference(dtA, dtB, \"quarter\"); //4\n       * dateExtender.difference(dtA, dtB, \"month\"); //13\n       *\n       * dtA = new Date(2000, 1, 1);\n       * dtB = new Date(2000, 1, 8);\n       * dateExtender.difference(dtA, dtB, \"week\"); //1\n       *\n       * dtA = new Date(2000, 1, 29);\n       * dtB = new Date(2000, 2, 1);\n       * dateExtender.difference(dtA, dtB, \"day\"); //1\n       *\n       * dtA = new Date(2006, 7, 3);\n       * dtB = new Date(2006, 7, 11);\n       * dateExtender.difference(dtA, dtB, \"weekday\"); //6\n       *\n       * dtA = new Date(2000, 11, 31, 23);\n       * dtB = new Date(2001, 0, 1, 0);\n       * dateExtender.difference(dtA, dtB, \"hour\"); //1\n       *\n       * dtA = new Date(2000, 11, 31, 23, 59);\n       * dtB = new Date(2001, 0, 1, 0, 0);\n       * dateExtender.difference(dtA, dtB, \"minute\"); //1\n       *\n       * dtA = new Date(2000, 11, 31, 23, 59, 59);\n       * dtB = new Date(2001, 0, 1, 0, 0, 0);\n       * dateExtender.difference(dtA, dtB, \"second\"); //1\n       *\n       * dtA = new Date(2000, 11, 31, 23, 59, 59, 999);\n       * dtB = new Date(2001, 0, 1, 0, 0, 0, 0);\n       * dateExtender.difference(dtA, dtB, \"millisecond\"); //1\n       *\n       *\n       * @param {Date} date1\n       * @param {Date} [date2 = new Date()]\n       * @param {String} [interval = \"day\"] the intercal to find the difference of.\n       *   <ul>\n       *      <li>day | days</li>\n       *      <li>weekday | weekdays</li>\n       *      <li>year | years</li>\n       *      <li>week | weeks</li>\n       *      <li>quarter | quarters</li>\n       *      <li>months | months</li>\n       *      <li>hour | hours</li>\n       *      <li>minute | minutes</li>\n       *      <li>second | seconds</li>\n       *      <li>millisecond | milliseconds</li>\n       *  </ul>\n       */\n      difference: function (\n      /*Date*/\n      date1,\n      /*Date?*/\n      date2,\n      /*String*/\n      interval, utc) {\n        date2 = date2 || new Date();\n        interval = interval || \"day\";\n        return differenceTransform(interval, date1, date2, utc);\n      },\n\n      /**\n       * Formats a date to the specidifed format string\n       *\n       * @example\n       *\n       * var date = new Date(2006, 7, 11, 0, 55, 12, 345);\n       * dateExtender.format(date, \"EEEE, MMMM dd, yyyy\"); //\"Friday, August 11, 2006\"\n       * dateExtender.format(date, \"M/dd/yy\"); //\"8/11/06\"\n       * dateExtender.format(date, \"E\"); //\"6\"\n       * dateExtender.format(date, \"h:m a\"); //\"12:55 AM\"\n       * dateExtender.format(date, 'h:m:s'); //\"12:55:12\"\n       * dateExtender.format(date, 'h:m:s.SS'); //\"12:55:12.35\"\n       * dateExtender.format(date, 'k:m:s.SS'); //\"24:55:12.35\"\n       * dateExtender.format(date, 'H:m:s.SS'); //\"0:55:12.35\"\n       * dateExtender.format(date, \"ddMMyyyy\"); //\"11082006\"\n       *\n       * @param date the date to format\n       * @param {String} format the format of the date composed of the following options\n       * <ul>\n       *                  <li> G    Era designator    Text    AD</li>\n       *                  <li> y    Year    Year    1996; 96</li>\n       *                  <li> M    Month in year    Month    July; Jul; 07</li>\n       *                  <li> w    Week in year    Number    27</li>\n       *                  <li> W    Week in month    Number    2</li>\n       *                  <li> D    Day in year    Number    189</li>\n       *                  <li> d    Day in month    Number    10</li>\n       *                  <li> E    Day in week    Text    Tuesday; Tue</li>\n       *                  <li> a    Am/pm marker    Text    PM</li>\n       *                  <li> H    Hour in day (0-23)    Number    0</li>\n       *                  <li> k    Hour in day (1-24)    Number    24</li>\n       *                  <li> K    Hour in am/pm (0-11)    Number    0</li>\n       *                  <li> h    Hour in am/pm (1-12)    Number    12</li>\n       *                  <li> m    Minute in hour    Number    30</li>\n       *                  <li> s    Second in minute    Number    55</li>\n       *                  <li> S    Millisecond    Number    978</li>\n       *                  <li> z    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00</li>\n       *                  <li> Z    Time zone    RFC 822 time zone    -0800 </li>\n       * </ul>\n       */\n      format: function (date, format, utc) {\n        utc = utc || false;\n        var fullYear, month, day, d, hour, minute, second, millisecond;\n\n        if (utc) {\n          fullYear = date.getUTCFullYear();\n          month = date.getUTCMonth();\n          day = date.getUTCDay();\n          d = date.getUTCDate();\n          hour = date.getUTCHours();\n          minute = date.getUTCMinutes();\n          second = date.getUTCSeconds();\n          millisecond = date.getUTCMilliseconds();\n        } else {\n          fullYear = date.getFullYear();\n          month = date.getMonth();\n          d = date.getDate();\n          day = date.getDay();\n          hour = date.getHours();\n          minute = date.getMinutes();\n          second = date.getSeconds();\n          millisecond = date.getMilliseconds();\n        }\n\n        return format.replace(/([A-Za-z])\\1*/g, function (match) {\n          var s,\n              pad,\n              c = match.charAt(0),\n              l = match.length;\n\n          if (c === 'd') {\n            s = \"\" + d;\n            pad = true;\n          } else if (c === \"H\" && !s) {\n            s = \"\" + hour;\n            pad = true;\n          } else if (c === 'm' && !s) {\n            s = \"\" + minute;\n            pad = true;\n          } else if (c === 's') {\n            if (!s) {\n              s = \"\" + second;\n            }\n\n            pad = true;\n          } else if (c === \"G\") {\n            s = (l < 4 ? eraAbbr : eraNames)[fullYear < 0 ? 0 : 1];\n          } else if (c === \"y\") {\n            s = fullYear;\n\n            if (l > 1) {\n              if (l === 2) {\n                s = _truncate(\"\" + s, 2, true);\n              } else {\n                pad = true;\n              }\n            }\n          } else if (c.toUpperCase() === \"Q\") {\n            s = ceil((month + 1) / 3);\n            pad = true;\n          } else if (c === \"M\") {\n            if (l < 3) {\n              s = month + 1;\n              pad = true;\n            } else {\n              s = (l === 3 ? monthAbbr : monthNames)[month];\n            }\n          } else if (c === \"w\") {\n            s = getWeekOfYear(date, 0, utc);\n            pad = true;\n          } else if (c === \"D\") {\n            s = getDayOfYear(date, utc);\n            pad = true;\n          } else if (c === \"E\") {\n            if (l < 3) {\n              s = day + 1;\n              pad = true;\n            } else {\n              s = (l === -3 ? dayAbbr : dayNames)[day];\n            }\n          } else if (c === 'a') {\n            s = hour < 12 ? 'AM' : 'PM';\n          } else if (c === \"h\") {\n            s = hour % 12 || 12;\n            pad = true;\n          } else if (c === \"K\") {\n            s = hour % 12;\n            pad = true;\n          } else if (c === \"k\") {\n            s = hour || 24;\n            pad = true;\n          } else if (c === \"S\") {\n            s = round(millisecond * pow(10, l - 3));\n            pad = true;\n          } else if (c === \"z\" || c === \"v\" || c === \"Z\") {\n            s = getTimezoneName(date);\n\n            if ((c === \"z\" || c === \"v\") && !s) {\n              l = 4;\n            }\n\n            if (!s || c === \"Z\") {\n              var offset = date.getTimezoneOffset();\n              var tz = [offset >= 0 ? \"-\" : \"+\", _pad(floor(abs(offset) / 60), 2, \"0\"), _pad(abs(offset) % 60, 2, \"0\")];\n\n              if (l === 4) {\n                tz.splice(0, 0, \"GMT\");\n                tz.splice(3, 0, \":\");\n              }\n\n              s = tz.join(\"\");\n            }\n          } else {\n            s = match;\n          }\n\n          if (pad) {\n            s = _pad(s, l, '0');\n          }\n\n          return s;\n        });\n      }\n    };\n    var numberDate = {};\n\n    function addInterval(interval) {\n      numberDate[interval + \"sFromNow\"] = function (val) {\n        return date.add(new Date(), interval, val);\n      };\n\n      numberDate[interval + \"sAgo\"] = function (val) {\n        return date.add(new Date(), interval, -val);\n      };\n    }\n\n    var intervals = [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\"];\n\n    for (var i = 0, l = intervals.length; i < l; i++) {\n      addInterval(intervals[i]);\n    }\n\n    var stringDate = {\n      parseDate: function (dateStr, format) {\n        if (!format) {\n          throw new Error('format required when calling dateExtender.parse');\n        }\n\n        var tokens = [],\n            regexp = buildDateEXP(format, tokens),\n            re = new RegExp(\"^\" + regexp + \"$\", \"i\"),\n            match = re.exec(dateStr);\n\n        if (!match) {\n          return null;\n        } // null\n\n\n        var result = [1970, 0, 1, 0, 0, 0, 0],\n            // will get converted to a Date at the end\n        amPm = \"\",\n            valid = every(match, function (v, i) {\n          if (i) {\n            var token = tokens[i - 1];\n            var l = token.length,\n                type = token.charAt(0);\n\n            if (type === 'y') {\n              if (v < 100) {\n                v = parseInt(v, 10); //choose century to apply, according to a sliding window\n                //of 80 years before and 20 years after present year\n\n                var year = '' + new Date().getFullYear(),\n                    century = year.substring(0, 2) * 100,\n                    cutoff = min(year.substring(2, 4) + 20, 99);\n                result[0] = v < cutoff ? century + v : century - 100 + v;\n              } else {\n                result[0] = v;\n              }\n            } else if (type === \"M\") {\n              if (l > 2) {\n                var months = monthNames,\n                    j,\n                    k;\n\n                if (l === 3) {\n                  months = monthAbbr;\n                } //Tolerate abbreviating period in month part\n                //Case-insensitive comparison\n\n\n                v = v.replace(\".\", \"\").toLowerCase();\n                var contains = false;\n\n                for (j = 0, k = months.length; j < k && !contains; j++) {\n                  var s = months[j].replace(\".\", \"\").toLocaleLowerCase();\n\n                  if (s === v) {\n                    v = j;\n                    contains = true;\n                  }\n                }\n\n                if (!contains) {\n                  return false;\n                }\n              } else {\n                v--;\n              }\n\n              result[1] = v;\n            } else if (type === \"E\" || type === \"e\") {\n              var days = dayNames;\n\n              if (l === 3) {\n                days = dayAbbr;\n              } //Case-insensitive comparison\n\n\n              v = v.toLowerCase();\n              days = array.map(days, function (d) {\n                return d.toLowerCase();\n              });\n              var d = array.indexOf(days, v);\n\n              if (d === -1) {\n                v = parseInt(v, 10);\n\n                if (isNaN(v) || v > days.length) {\n                  return false;\n                }\n              } else {\n                v = d;\n              }\n            } else if (type === 'D' || type === \"d\") {\n              if (type === \"D\") {\n                result[1] = 0;\n              }\n\n              result[2] = v;\n            } else if (type === \"a\") {\n              var am = \"am\";\n              var pm = \"pm\";\n              var period = /\\./g;\n              v = v.replace(period, '').toLowerCase(); // we might not have seen the hours field yet, so store the state and apply hour change later\n\n              amPm = v === pm ? 'p' : v === am ? 'a' : '';\n            } else if (type === \"k\" || type === \"h\" || type === \"H\" || type === \"K\") {\n              if (type === \"k\" && +v === 24) {\n                v = 0;\n              }\n\n              result[3] = v;\n            } else if (type === \"m\") {\n              result[4] = v;\n            } else if (type === \"s\") {\n              result[5] = v;\n            } else if (type === \"S\") {\n              result[6] = v;\n            }\n          }\n\n          return true;\n        });\n\n        if (valid) {\n          var hours = +result[3]; //account for am/pm\n\n          if (amPm === 'p' && hours < 12) {\n            result[3] = hours + 12; //e.g., 3pm -> 15\n          } else if (amPm === 'a' && hours === 12) {\n            result[3] = 0; //12am -> 0\n          }\n\n          var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date\n\n          var dateToken = array.indexOf(tokens, 'd') !== -1,\n              monthToken = array.indexOf(tokens, 'M') !== -1,\n              month = result[1],\n              day = result[2],\n              dateMonth = dateObject.getMonth(),\n              dateDay = dateObject.getDate();\n\n          if (monthToken && dateMonth > month || dateToken && dateDay > day) {\n            return null;\n          }\n\n          return dateObject; // Date\n        } else {\n          return null;\n        }\n      }\n    };\n    var ret = extended.define(is.isDate, date).define(is.isString, stringDate).define(is.isNumber, numberDate);\n\n    for (i in date) {\n      if (date.hasOwnProperty(i)) {\n        ret[i] = date[i];\n      }\n    }\n\n    for (i in stringDate) {\n      if (stringDate.hasOwnProperty(i)) {\n        ret[i] = stringDate[i];\n      }\n    }\n\n    for (i in numberDate) {\n      if (numberDate.hasOwnProperty(i)) {\n        ret[i] = numberDate[i];\n      }\n    }\n\n    return ret;\n  }\n\n  if (\"undefined\" !== typeof exports) {\n    if (\"undefined\" !== typeof module && module.exports) {\n      module.exports = defineDate(require(\"extended\"), require(\"is-extended\"), require(\"array-extended\"));\n    }\n  } else if (\"function\" === typeof define && define.amd) {\n    define([\"extended\", \"is-extended\", \"array-extended\"], function (extended, is, arr) {\n      return defineDate(extended, is, arr);\n    });\n  } else {\n    this.dateExtended = defineDate(this.extended, this.isExtended, this.arrayExtended);\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}