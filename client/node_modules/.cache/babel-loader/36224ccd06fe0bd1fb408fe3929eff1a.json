{"ast":null,"code":"var _jsxFileName = \"/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js\";\nimport ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants';\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetLoaded: false,\n      auctionWebData: {},\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n    };\n  }\n\n  render() {\n    const populatePlayerInfo = players => {\n      let returnData = {};\n      let playersData = players.data;\n\n      for (let i = 1; i < playersData.length; i++) {\n        let playerProfile = {};\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.name = playersData[i][1];\n        playerProfile.emailId = playersData[i][2];\n        playerProfile.mobileNo = playersData[i][3];\n        playerProfile.perTeamPlayerCount = playersData[i][4];\n        playerProfile.mtbcTeamName = playersData[i][5];\n        playerProfile.mtplTeamName = playersData[i][6];\n        playerProfile.basePrice = playersData[i][7];\n        playerProfile.purchasePrice = playersData[i][8];\n        playerProfile.status = playersData[i][9];\n        playerProfile.isExternalPlayer = playersData[i][10];\n        playerProfile.isRetainedPlayer = playersData[i][11];\n        playerProfile.isOwnerPlayer = playersData[i][12];\n        playerProfile.overallRank = playersData[i][13];\n        playerProfile.batRank = playersData[i][14];\n        playerProfile.bowlRank = playersData[i][15];\n        playerProfile.matches = playersData[i][16];\n        playerProfile.runs = playersData[i][17];\n        playerProfile.ballsFaced = playersData[i][18];\n        playerProfile.batSR = playersData[i][19];\n        playerProfile.wickets = playersData[i][20];\n        playerProfile.economy = playersData[i][21];\n        playerProfile.bowlOvers = playersData[i][22];\n        playerProfile.batAverage = playersData[i][23];\n        playerProfile.highestScore = playersData[i][24];\n        playerProfile.bestBowl = playersData[i][25];\n        playerProfile.hatTrick = playersData[i][26];\n        playerProfile.catches = playersData[i][27];\n        playerProfile.totalPoints = playersData[i][28];\n        playerProfile.batPoints = playersData[i][29];\n        playerProfile.bowlPoints = playersData[i][30];\n        playerProfile.fieldPoints = playersData[i][31];\n        returnData[playerProfile.playerId] = playerProfile;\n      }\n\n      return returnData;\n    };\n\n    const populateTeams = mtplTeams => {\n      let returnData = {};\n      let teams = mtplTeams.data;\n\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.name = teams[i][0];\n        teamInfo.ownerName = teams[i][1];\n        teamInfo.isOwnerPlayer = teams[i][2];\n        teamInfo.amount = teams[i][3];\n        teamInfo.amountSpent = teams[i][4];\n        teamInfo.amountBalance = teams[i][5];\n        teamInfo.playerCount = teams[i][6];\n        teamInfo.remainingPlayerCount = teams[i][7];\n        teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n        teamInfo.ownerPlayerId = teams[i][9];\n        teamInfo.retainedPlayerId = teams[i][10];\n        returnData[teamInfo.name] = teamInfo;\n      }\n\n      return returnData;\n    };\n\n    const getAuctionData = xcelData => {\n      let auctionData = {};\n\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return auctionData;\n    };\n\n    const retrieveAuctionData = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionWebData = getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionWebData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionWebData.mtplTeams);\n      let returnData = {};\n      returnData.players = populatePlayerInfo(auctionWebData.mtplPlayers);\n      returnData.teams = populateTeams(auctionWebData.mtplTeams);\n      console.log(\"MTPL Players : \", returnData.players);\n      console.log(\"MTPL Teams : \", returnData.teams);\n      this.state.auctionWebData = returnData;\n    };\n\n    const createPlayerProfile = () => {\n      return React.createElement(\"div\", {\n        className: \"AuctionBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Previous\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: () => {\n          this.props.updateCell('MTPL Players', // sheetName\n          'G', // column\n          4, // row\n          'Sholay - 11', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n          this.props.updateCell('MTPL Players', // sheetName\n          'I', // column\n          4, // row\n          '50000', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"update cell!\"));\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(ReactGoogleSheets, {\n      clientId: Constants.CLIENT_ID,\n      apiKey: Constants.API_KEY,\n      spreadsheetId: Constants.MTPL_MENS_SPREADSHEET_ID,\n      afterLoading: () => this.setState({\n        sheetLoaded: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.state.sheetLoaded ? retrieveAuctionData() : 'loading...'), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.state.auctionWebData.players)) //this.state.sheetLoaded ? createPlayerProfile() : 'test' }      \n    ;\n  }\n\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);","map":{"version":3,"sources":["/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js"],"names":["ReactGoogleSheets","Constants","React","Component","testDataComponent","constructor","props","state","sheetLoaded","auctionWebData","currentPlayerId","nextPlayerId","prevPlayerId","render","populatePlayerInfo","players","returnData","playersData","data","i","length","playerProfile","playerId","name","emailId","mobileNo","perTeamPlayerCount","mtbcTeamName","mtplTeamName","basePrice","purchasePrice","status","isExternalPlayer","isRetainedPlayer","isOwnerPlayer","overallRank","batRank","bowlRank","matches","runs","ballsFaced","batSR","wickets","economy","bowlOvers","batAverage","highestScore","bestBowl","hatTrick","catches","totalPoints","batPoints","bowlPoints","fieldPoints","populateTeams","mtplTeams","teams","teamInfo","ownerName","amount","amountSpent","amountBalance","playerCount","remainingPlayerCount","maxAllowedBidOnNextPlayer","ownerPlayerId","retainedPlayerId","getAuctionData","xcelData","auctionData","mtplPlayers","retrieveAuctionData","getSheetsData","console","log","createPlayerProfile","updateCell","error","CLIENT_ID","API_KEY","MTPL_MENS_SPREADSHEET_ID","setState","connect"],"mappings":"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","sourcesContent":["import ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants'\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      sheetLoaded: false,\n      auctionWebData: {},\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n\n    }\n  }\n  render() {\n\n    const populatePlayerInfo = (players) => {\n      let returnData = {};\n      let playersData = players.data;\n      for (let i = 1; i < playersData.length; i++) {\n        let playerProfile = {};\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.name = playersData[i][1];\n        playerProfile.emailId = playersData[i][2];\n        playerProfile.mobileNo = playersData[i][3];\n        playerProfile.perTeamPlayerCount = playersData[i][4];\n        playerProfile.mtbcTeamName = playersData[i][5];\n        playerProfile.mtplTeamName = playersData[i][6];\n        playerProfile.basePrice = playersData[i][7];\n        playerProfile.purchasePrice = playersData[i][8];\n        playerProfile.status = playersData[i][9];\n        playerProfile.isExternalPlayer = playersData[i][10];\n        playerProfile.isRetainedPlayer = playersData[i][11];\n        playerProfile.isOwnerPlayer = playersData[i][12];\n        playerProfile.overallRank = playersData[i][13];\n        playerProfile.batRank = playersData[i][14];\n        playerProfile.bowlRank = playersData[i][15];\n        playerProfile.matches = playersData[i][16];\n        playerProfile.runs = playersData[i][17];\n        playerProfile.ballsFaced = playersData[i][18];\n        playerProfile.batSR = playersData[i][19];\n        playerProfile.wickets = playersData[i][20];\n        playerProfile.economy = playersData[i][21];\n        playerProfile.bowlOvers = playersData[i][22];\n        playerProfile.batAverage = playersData[i][23];\n        playerProfile.highestScore = playersData[i][24];\n        playerProfile.bestBowl = playersData[i][25];\n        playerProfile.hatTrick = playersData[i][26];\n        playerProfile.catches = playersData[i][27];\n        playerProfile.totalPoints = playersData[i][28];\n        playerProfile.batPoints = playersData[i][29];\n        playerProfile.bowlPoints = playersData[i][30];\n        playerProfile.fieldPoints = playersData[i][31];\n\n        returnData[playerProfile.playerId] = playerProfile;\n      }\n      return returnData;\n    }\n\n    const populateTeams = (mtplTeams) => {\n      let returnData = {};\n      let teams = mtplTeams.data;\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.name = teams[i][0];\n        teamInfo.ownerName = teams[i][1];\n        teamInfo.isOwnerPlayer = teams[i][2];\n        teamInfo.amount = teams[i][3];\n        teamInfo.amountSpent = teams[i][4];\n        teamInfo.amountBalance = teams[i][5];\n        teamInfo.playerCount = teams[i][6];\n        teamInfo.remainingPlayerCount = teams[i][7];\n        teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n        teamInfo.ownerPlayerId = teams[i][9];\n        teamInfo.retainedPlayerId = teams[i][10];\n        returnData[teamInfo.name] = teamInfo;\n      }\n      return returnData;\n    }\n\n    const getAuctionData = (xcelData) => {\n      let auctionData = {};\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n          default:\n            break;\n        }\n      }\n      return auctionData;\n    }\n\n    const retrieveAuctionData = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionWebData = getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionWebData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionWebData.mtplTeams);\n\n      let returnData = {};\n      returnData.players = populatePlayerInfo(auctionWebData.mtplPlayers);\n      returnData.teams = populateTeams(auctionWebData.mtplTeams);\n      console.log(\"MTPL Players : \",returnData.players);\n      console.log(\"MTPL Teams : \",returnData.teams);\n      this.state.auctionWebData = returnData;\n    }\n\n    const createPlayerProfile = () => {\n          \n      return (\n        <div className=\"AuctionBody\">\n          {/* Access Data */}\n\n          { /* this.state.players.push(); */}\n\n          {/* Previous Player Info*/}\n          <button onClick={() => {\n\n          }}>Previous</button>\n\n          <div>\n\n          </div>\n\n          {/* Next Player Info*/}\n          <button onClick={() => {\n\n          }}>Next</button>\n\n          {/* Update Data */}\n          <button onClick={() => {\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'G', // column\n              4, // row\n              'Sholay - 11', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'I', // column\n              4, // row\n              '50000', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n          }}>update cell!</button>\n        </div>\n      )\n    }\n\n    return (\n      <div>\n      <ReactGoogleSheets\n        clientId={Constants.CLIENT_ID}\n        apiKey={Constants.API_KEY}\n        spreadsheetId={Constants.MTPL_MENS_SPREADSHEET_ID}\n        afterLoading={() => this.setState({ sheetLoaded: true })}\n      >\n        {this.state.sheetLoaded ? retrieveAuctionData() : 'loading...'}\n      </ReactGoogleSheets>\n      \n      <div>\n         { this.state.auctionWebData.players }\n       </div>\n       </div>\n      //this.state.sheetLoaded ? createPlayerProfile() : 'test' }      \n    )\n  }\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);\n"]},"metadata":{},"sourceType":"module"}