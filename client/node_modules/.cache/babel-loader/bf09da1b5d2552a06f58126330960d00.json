{"ast":null,"code":"const XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\n\nconst VmlNoteXform = require('./vml-note-xform'); // This class is (currently) single purposed to insert the triangle\n// drawing icons on commented cells\n\n\nclass VmlNotesXform extends BaseXform {\n  get tag() {\n    return 'xml';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode(this.tag, VmlNotesXform.DRAWING_ATTRIBUTES);\n    xmlStream.openNode('o:shapelayout', {\n      'v:ext': 'edit'\n    });\n    xmlStream.leafNode('o:idmap', {\n      'v:ext': 'edit',\n      data: 1\n    });\n    xmlStream.closeNode();\n    xmlStream.openNode('v:shapetype', {\n      id: '_x0000_t202',\n      coordsize: '21600,21600',\n      'o:spt': 202,\n      path: 'm,l,21600r21600,l21600,xe'\n    });\n    xmlStream.leafNode('v:stroke', {\n      joinstyle: 'miter'\n    });\n    xmlStream.leafNode('v:path', {\n      gradientshapeok: 't',\n      'o:connecttype': 'rect'\n    });\n    xmlStream.closeNode();\n    model.comments.forEach((item, index) => {\n      VmlNotesXform.vmlCommentXform.render(xmlStream, item, index);\n    });\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        this.reset();\n        this.model = {\n          anchors: []\n        };\n        break;\n\n      default:\n        this.parser = this.map[node.name];\n\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n\n        break;\n    }\n\n    return true;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.anchors.push(this.parser.model);\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    switch (name) {\n      case this.tag:\n        return false;\n\n      default:\n        // could be some unrecognised tags\n        return true;\n    }\n  }\n\n  reconcile(model, options) {\n    model.anchors.forEach(anchor => {\n      if (anchor.br) {\n        this.map['xdr:twoCellAnchor'].reconcile(anchor, options);\n      } else {\n        this.map['xdr:oneCellAnchor'].reconcile(anchor, options);\n      }\n    });\n  }\n\n}\n\nVmlNotesXform.DRAWING_ATTRIBUTES = {\n  'xmlns:v': 'urn:schemas-microsoft-com:vml',\n  'xmlns:o': 'urn:schemas-microsoft-com:office:office',\n  'xmlns:x': 'urn:schemas-microsoft-com:office:excel'\n};\nVmlNotesXform.vmlCommentXform = new VmlNoteXform();\nmodule.exports = VmlNotesXform;","map":null,"metadata":{},"sourceType":"script"}