{"ast":null,"code":"var is = require(\"is-extended\"),\n    hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = require(\"extended\")().register(is).register(require(\"object-extended\")).register(require(\"string-extended\")).register(\"LINE_BREAK\", require(\"os\").EOL).register(\"asyncEach\", function (arr, iter, cb) {\n  (function asyncIterator(i, l, rows, cb) {\n    if (++i < l) {\n      iter(rows[i], function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          if (i % 100 === 0) {\n            //dont overflow the stack\n            setImmediate(function () {\n              asyncIterator(i, l, rows, cb);\n            });\n          } else {\n            asyncIterator(i, l, rows, cb);\n          }\n        }\n      });\n    } else {\n      //get out of stack\n      cb(null, arr);\n    }\n  })(-1, arr.length, arr, cb);\n}).register(\"spreadArgs\", function spreadArgs(f, args, scope) {\n  var ret;\n\n  switch ((args || []).length) {\n    case 0:\n      ret = f.call(scope);\n      break;\n\n    case 1:\n      ret = f.call(scope, args[0]);\n      break;\n\n    case 2:\n      ret = f.call(scope, args[0], args[1]);\n      break;\n\n    case 3:\n      ret = f.call(scope, args[0], args[1], args[2]);\n      break;\n\n    default:\n      ret = f.apply(scope, args);\n  }\n\n  return ret;\n}).register(\"keys\", function (obj) {\n  var ret = [];\n\n  for (var i in obj) {\n    if (hasOwn.call(obj, i)) {\n      ret.push(i);\n    }\n  }\n\n  return ret;\n});","map":null,"metadata":{},"sourceType":"script"}