{"ast":null,"code":"var _jsxFileName = \"/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js\";\nimport ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Player from './Player.js';\n\nclass DataComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = selectedOption => {\n      console.log(\"Option selected:\", selectedOption);\n    };\n\n    this.populatePlayerInfo = (players, mtplTeams) => {\n      let returnData = [];\n      let playersData = players.data;\n\n      for (let i = 0; i < playersData.length; i++) {\n        let playerProfile = {};\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.name = playersData[i][1];\n        playerProfile.emailId = playersData[i][2];\n        playerProfile.mobileNo = playersData[i][3];\n        playerProfile.perTeamPlayerCount = playersData[i][4];\n        playerProfile.mtbcTeamName = playersData[i][5];\n        playerProfile.mtplTeamName = playersData[i][6];\n        playerProfile.basePrice = playersData[i][7];\n        playerProfile.purchasePrice = playersData[i][8];\n        playerProfile.status = playersData[i][9];\n        playerProfile.isExternalPlayer = playersData[i][10];\n        playerProfile.isRetainedPlayer = playersData[i][11];\n        playerProfile.isOwnerPlayer = playersData[i][12];\n        playerProfile.overallRank = playersData[i][13];\n        playerProfile.id = playersData[i][13];\n        playerProfile.batRank = playersData[i][14];\n        playerProfile.bowlRank = playersData[i][15];\n        playerProfile.matches = playersData[i][16];\n        playerProfile.runs = playersData[i][17];\n        playerProfile.ballsFaced = playersData[i][18];\n        playerProfile.batSR = playersData[i][19];\n        playerProfile.wickets = playersData[i][20];\n        playerProfile.economy = playersData[i][21];\n        playerProfile.bowlOvers = playersData[i][22];\n        playerProfile.batAverage = playersData[i][23];\n        playerProfile.highestScore = playersData[i][24];\n        playerProfile.bestBowl = playersData[i][25];\n        playerProfile.hatTrick = playersData[i][26];\n        playerProfile.catches = playersData[i][27];\n        playerProfile.totalPoints = playersData[i][28];\n        playerProfile.batPoints = playersData[i][29];\n        playerProfile.bowlPoints = playersData[i][30];\n        playerProfile.fieldPoints = playersData[i][31];\n        playerProfile.mtplTeams = this.populateTeams(mtplTeams);\n        playerProfile.teamOptions = this.teamOptions(playerProfile.id, mtplTeams);\n        returnData.push(playerProfile);\n      }\n\n      return returnData;\n    };\n\n    this.populateTeams = mtplTeams => {\n      let returnData = [];\n      let teams = mtplTeams.data;\n\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.name = teams[i][0];\n        teamInfo.ownerName = teams[i][1];\n        teamInfo.isOwnerPlayer = teams[i][2];\n        teamInfo.amount = teams[i][3];\n        teamInfo.amountSpent = teams[i][4];\n        teamInfo.amountBalance = teams[i][5];\n        teamInfo.playerCount = teams[i][6];\n        teamInfo.remainingPlayerCount = teams[i][7];\n        teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n        teamInfo.ownerPlayerId = teams[i][9];\n        teamInfo.retainedPlayerId = teams[i][10];\n        returnData.push(teamInfo);\n      }\n\n      return returnData;\n    };\n\n    this.getAuctionData = xcelData => {\n      let auctionData = {};\n\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return auctionData;\n    };\n\n    this.retrieveAuctionData = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionWebData = this.getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionWebData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionWebData.mtplTeams);\n      let returnData = {};\n      returnData.players = this.populatePlayerInfo(auctionWebData.mtplPlayers, auctionWebData.mtplTeams);\n      console.log(\"MTPL Players : \", returnData.players);\n      return returnData;\n    };\n\n    this.teamOptions = (id, mtplTeams) => {\n      let returnData = [];\n      let teams = mtplTeams.data;\n\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.value = id + '-' + teams[i][0];\n        teamInfo.label = teams[i][0];\n        returnData.push(teamInfo);\n      }\n\n      return returnData;\n    };\n\n    this.state = {\n      sheetLoaded: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(ReactGoogleSheets, {\n      clientId: Constants.CLIENT_ID,\n      apiKey: Constants.API_KEY,\n      spreadsheetId: Constants.MTPL_MENS_SPREADSHEET_ID,\n      afterLoading: () => this.setState({\n        sheetLoaded: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.state.sheetLoaded ? this.retrieveAuctionData().players.map((item, key) => React.createElement(Player, {\n      item: item,\n      id: key,\n      updateCell: this.props.updateCell,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })) : 'loading...'));\n  }\n\n}\n\nexport default ReactGoogleSheets.connect(DataComponent);","map":{"version":3,"sources":["/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js"],"names":["ReactGoogleSheets","Constants","React","Component","Player","DataComponent","constructor","props","handleChange","selectedOption","console","log","populatePlayerInfo","players","mtplTeams","returnData","playersData","data","i","length","playerProfile","playerId","name","emailId","mobileNo","perTeamPlayerCount","mtbcTeamName","mtplTeamName","basePrice","purchasePrice","status","isExternalPlayer","isRetainedPlayer","isOwnerPlayer","overallRank","id","batRank","bowlRank","matches","runs","ballsFaced","batSR","wickets","economy","bowlOvers","batAverage","highestScore","bestBowl","hatTrick","catches","totalPoints","batPoints","bowlPoints","fieldPoints","populateTeams","teamOptions","push","teams","teamInfo","ownerName","amount","amountSpent","amountBalance","playerCount","remainingPlayerCount","maxAllowedBidOnNextPlayer","ownerPlayerId","retainedPlayerId","getAuctionData","xcelData","auctionData","mtplPlayers","retrieveAuctionData","getSheetsData","auctionWebData","value","label","state","sheetLoaded","render","CLIENT_ID","API_KEY","MTPL_MENS_SPREADSHEET_ID","setState","map","item","key","updateCell","connect"],"mappings":";AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,aAAN,SAA4BF,SAA5B,CAAsC;AAEpCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAOnBC,YAPmB,GAOJC,cAAc,IAAI;AAC/BC,MAAAA,OAAO,CAACC,GAAR,qBAAgCF,cAAhC;AACD,KATkB;;AAAA,SAWnBG,kBAXmB,GAWE,CAACC,OAAD,EAAUC,SAAV,KAAwB;AAC3C,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,WAAW,GAAGH,OAAO,CAACI,IAA1B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAIE,aAAa,GAAG,EAApB;AACAA,QAAAA,aAAa,CAACC,QAAd,GAAyBL,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAAzB;AACAE,QAAAA,aAAa,CAACE,IAAd,GAAqBN,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAArB;AACAE,QAAAA,aAAa,CAACG,OAAd,GAAwBP,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAAxB;AACAE,QAAAA,aAAa,CAACI,QAAd,GAAyBR,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAAzB;AACAE,QAAAA,aAAa,CAACK,kBAAd,GAAmCT,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAAnC;AACAE,QAAAA,aAAa,CAACM,YAAd,GAA6BV,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAA7B;AACAE,QAAAA,aAAa,CAACO,YAAd,GAA6BX,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAA7B;AACAE,QAAAA,aAAa,CAACQ,SAAd,GAA0BZ,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAA1B;AACAE,QAAAA,aAAa,CAACS,aAAd,GAA8Bb,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAA9B;AACAE,QAAAA,aAAa,CAACU,MAAd,GAAuBd,WAAW,CAACE,CAAD,CAAX,CAAe,CAAf,CAAvB;AACAE,QAAAA,aAAa,CAACW,gBAAd,GAAiCf,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAjC;AACAE,QAAAA,aAAa,CAACY,gBAAd,GAAiChB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAjC;AACAE,QAAAA,aAAa,CAACa,aAAd,GAA8BjB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA9B;AACAE,QAAAA,aAAa,CAACc,WAAd,GAA4BlB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA5B;AACAE,QAAAA,aAAa,CAACe,EAAd,GAAmBnB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAnB;AACAE,QAAAA,aAAa,CAACgB,OAAd,GAAwBpB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAxB;AACAE,QAAAA,aAAa,CAACiB,QAAd,GAAyBrB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAzB;AACAE,QAAAA,aAAa,CAACkB,OAAd,GAAwBtB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAxB;AACAE,QAAAA,aAAa,CAACmB,IAAd,GAAqBvB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAArB;AACAE,QAAAA,aAAa,CAACoB,UAAd,GAA2BxB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA3B;AACAE,QAAAA,aAAa,CAACqB,KAAd,GAAsBzB,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAtB;AACAE,QAAAA,aAAa,CAACsB,OAAd,GAAwB1B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAxB;AACAE,QAAAA,aAAa,CAACuB,OAAd,GAAwB3B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAxB;AACAE,QAAAA,aAAa,CAACwB,SAAd,GAA0B5B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA1B;AACAE,QAAAA,aAAa,CAACyB,UAAd,GAA2B7B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA3B;AACAE,QAAAA,aAAa,CAAC0B,YAAd,GAA6B9B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA7B;AACAE,QAAAA,aAAa,CAAC2B,QAAd,GAAyB/B,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAzB;AACAE,QAAAA,aAAa,CAAC4B,QAAd,GAAyBhC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAzB;AACAE,QAAAA,aAAa,CAAC6B,OAAd,GAAwBjC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAAxB;AACAE,QAAAA,aAAa,CAAC8B,WAAd,GAA4BlC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA5B;AACAE,QAAAA,aAAa,CAAC+B,SAAd,GAA0BnC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA1B;AACAE,QAAAA,aAAa,CAACgC,UAAd,GAA2BpC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA3B;AACAE,QAAAA,aAAa,CAACiC,WAAd,GAA4BrC,WAAW,CAACE,CAAD,CAAX,CAAe,EAAf,CAA5B;AACAE,QAAAA,aAAa,CAACN,SAAd,GAA0B,KAAKwC,aAAL,CAAmBxC,SAAnB,CAA1B;AACAM,QAAAA,aAAa,CAACmC,WAAd,GAA4B,KAAKA,WAAL,CAAiBnC,aAAa,CAACe,EAA/B,EAAmCrB,SAAnC,CAA5B;AACAC,QAAAA,UAAU,CAACyC,IAAX,CAAgBpC,aAAhB;AACD;;AACD,aAAOL,UAAP;AACD,KAtDkB;;AAAA,SAwDnBuC,aAxDmB,GAwDFxC,SAAD,IAAe;AAC7B,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAI0C,KAAK,GAAG3C,SAAS,CAACG,IAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,KAAK,CAACtC,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIwC,QAAQ,GAAG,EAAf;AACAA,QAAAA,QAAQ,CAACpC,IAAT,GAAgBmC,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAhB;AACAwC,QAAAA,QAAQ,CAACC,SAAT,GAAqBF,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAArB;AACAwC,QAAAA,QAAQ,CAACzB,aAAT,GAAyBwB,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAzB;AACAwC,QAAAA,QAAQ,CAACE,MAAT,GAAkBH,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAlB;AACAwC,QAAAA,QAAQ,CAACG,WAAT,GAAuBJ,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAvB;AACAwC,QAAAA,QAAQ,CAACI,aAAT,GAAyBL,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAzB;AACAwC,QAAAA,QAAQ,CAACK,WAAT,GAAuBN,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAvB;AACAwC,QAAAA,QAAQ,CAACM,oBAAT,GAAgCP,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAhC;AACAwC,QAAAA,QAAQ,CAACO,yBAAT,GAAqCR,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAArC;AACAwC,QAAAA,QAAQ,CAACQ,aAAT,GAAyBT,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAzB;AACAwC,QAAAA,QAAQ,CAACS,gBAAT,GAA4BV,KAAK,CAACvC,CAAD,CAAL,CAAS,EAAT,CAA5B;AACAH,QAAAA,UAAU,CAACyC,IAAX,CAAgBE,QAAhB;AACD;;AACD,aAAO3C,UAAP;AACD,KA3EkB;;AAAA,SA6EnBqD,cA7EmB,GA6EDC,QAAD,IAAc;AAC7B,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAK,IAAIpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmD,QAAQ,CAAClD,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,gBAAQmD,QAAQ,CAACnD,CAAD,CAAR,CAAYI,IAApB;AACE,eAAK,cAAL;AACEgD,YAAAA,WAAW,CAACC,WAAZ,GAA0BF,QAAQ,CAACnD,CAAD,CAAlC;AACA;;AACF,eAAK,YAAL;AACEoD,YAAAA,WAAW,CAACxD,SAAZ,GAAwBuD,QAAQ,CAACnD,CAAD,CAAhC;AACA;;AACF;AACE;AARJ;AAUD;;AACD,aAAOoD,WAAP;AACD,KA5FkB;;AAAA,SA8FnBE,mBA9FmB,GA8FG,MAAM;AAC1B,UAAIH,QAAQ,GAAG,KAAK9D,KAAL,CAAWkE,aAAX,EAAf;AACA/D,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B0D,QAAQ,CAAClD,MAAxC;AACA,UAAIuD,cAAc,GAAG,KAAKN,cAAL,CAAoBC,QAApB,CAArB;AACA3D,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B+D,cAAc,CAACH,WAA9C;AACA7D,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B+D,cAAc,CAAC5D,SAA5C;AAEA,UAAIC,UAAU,GAAG,EAAjB;AAEAA,MAAAA,UAAU,CAACF,OAAX,GAAqB,KAAKD,kBAAL,CAAwB8D,cAAc,CAACH,WAAvC,EAAoDG,cAAc,CAAC5D,SAAnE,CAArB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BI,UAAU,CAACF,OAA1C;AACA,aAAOE,UAAP;AACD,KA1GkB;;AAAA,SA4GnBwC,WA5GmB,GA4GL,CAACpB,EAAD,EAAKrB,SAAL,KAAmB;AAC/B,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAI0C,KAAK,GAAG3C,SAAS,CAACG,IAAtB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuC,KAAK,CAACtC,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAIwC,QAAQ,GAAG,EAAf;AACAA,QAAAA,QAAQ,CAACiB,KAAT,GAAiBxC,EAAE,GAAG,GAAL,GAAWsB,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAA5B;AACAwC,QAAAA,QAAQ,CAACkB,KAAT,GAAiBnB,KAAK,CAACvC,CAAD,CAAL,CAAS,CAAT,CAAjB;AACAH,QAAAA,UAAU,CAACyC,IAAX,CAAgBE,QAAhB;AACD;;AACD,aAAO3C,UAAP;AACD,KAtHkB;;AAEjB,SAAK8D,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE;AADF,KAAb;AAGD;;AAmHDC,EAAAA,MAAM,GAAG;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,iBAAD;AACE,MAAA,QAAQ,EAAE9E,SAAS,CAAC+E,SADtB;AAEE,MAAA,MAAM,EAAE/E,SAAS,CAACgF,OAFpB;AAGE,MAAA,aAAa,EAAEhF,SAAS,CAACiF,wBAH3B;AAIE,MAAA,YAAY,EAAE,MAAM,KAAKC,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAE;AAAf,OAAd,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKD,KAAL,CAAWC,WAAX,GAAyB,KAAKN,mBAAL,GAA2B3D,OAA3B,CAAmCuE,GAAnC,CAAuC,CAACC,IAAD,EAAOC,GAAP,KAC/D,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAED,IAAd;AAAqB,MAAA,EAAE,EAAEC,GAAzB;AAA8B,MAAA,UAAU,EAAE,KAAK/E,KAAL,CAAWgF,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADwB,CAAzB,GAEI,YARP,CADF,CADF;AAeD;;AA3ImC;;AA8ItC,eAAevF,iBAAiB,CAACwF,OAAlB,CAA0BnF,aAA1B,CAAf","sourcesContent":["import ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants'\nimport React, { Component } from 'react';\nimport './App.css';\nimport Player from './Player.js'\n\nclass DataComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      sheetLoaded: false\n    }\n  }\n\n  handleChange = selectedOption => {\n    console.log(`Option selected:`, selectedOption);\n  };\n\n  populatePlayerInfo = (players, mtplTeams) => {\n    let returnData = [];\n    let playersData = players.data;\n    for (let i = 0; i < playersData.length; i++) {\n      let playerProfile = {};\n      playerProfile.playerId = playersData[i][0];\n      playerProfile.name = playersData[i][1];\n      playerProfile.emailId = playersData[i][2];\n      playerProfile.mobileNo = playersData[i][3];\n      playerProfile.perTeamPlayerCount = playersData[i][4];\n      playerProfile.mtbcTeamName = playersData[i][5];\n      playerProfile.mtplTeamName = playersData[i][6];\n      playerProfile.basePrice = playersData[i][7];\n      playerProfile.purchasePrice = playersData[i][8];\n      playerProfile.status = playersData[i][9];\n      playerProfile.isExternalPlayer = playersData[i][10];\n      playerProfile.isRetainedPlayer = playersData[i][11];\n      playerProfile.isOwnerPlayer = playersData[i][12];\n      playerProfile.overallRank = playersData[i][13];\n      playerProfile.id = playersData[i][13];\n      playerProfile.batRank = playersData[i][14];\n      playerProfile.bowlRank = playersData[i][15];\n      playerProfile.matches = playersData[i][16];\n      playerProfile.runs = playersData[i][17];\n      playerProfile.ballsFaced = playersData[i][18];\n      playerProfile.batSR = playersData[i][19];\n      playerProfile.wickets = playersData[i][20];\n      playerProfile.economy = playersData[i][21];\n      playerProfile.bowlOvers = playersData[i][22];\n      playerProfile.batAverage = playersData[i][23];\n      playerProfile.highestScore = playersData[i][24];\n      playerProfile.bestBowl = playersData[i][25];\n      playerProfile.hatTrick = playersData[i][26];\n      playerProfile.catches = playersData[i][27];\n      playerProfile.totalPoints = playersData[i][28];\n      playerProfile.batPoints = playersData[i][29];\n      playerProfile.bowlPoints = playersData[i][30];\n      playerProfile.fieldPoints = playersData[i][31];\n      playerProfile.mtplTeams = this.populateTeams(mtplTeams);\n      playerProfile.teamOptions = this.teamOptions(playerProfile.id, mtplTeams);\n      returnData.push(playerProfile);\n    }\n    return returnData;\n  };\n\n  populateTeams = (mtplTeams) => {\n    let returnData = [];\n    let teams = mtplTeams.data;\n    for (let i = 3; i < teams.length; i++) {\n      let teamInfo = {};\n      teamInfo.name = teams[i][0];\n      teamInfo.ownerName = teams[i][1];\n      teamInfo.isOwnerPlayer = teams[i][2];\n      teamInfo.amount = teams[i][3];\n      teamInfo.amountSpent = teams[i][4];\n      teamInfo.amountBalance = teams[i][5];\n      teamInfo.playerCount = teams[i][6];\n      teamInfo.remainingPlayerCount = teams[i][7];\n      teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n      teamInfo.ownerPlayerId = teams[i][9];\n      teamInfo.retainedPlayerId = teams[i][10];\n      returnData.push(teamInfo);\n    }\n    return returnData;\n  };\n\n  getAuctionData = (xcelData) => {\n    let auctionData = {};\n    for (let i = 0; i < xcelData.length; i++) {\n      switch (xcelData[i].name) {\n        case 'MTPL Players':\n          auctionData.mtplPlayers = xcelData[i];\n          break;\n        case 'MTPL Teams':\n          auctionData.mtplTeams = xcelData[i];\n          break;\n        default:\n          break;\n      }\n    }\n    return auctionData;\n  };\n\n  retrieveAuctionData = () => {\n    let xcelData = this.props.getSheetsData();\n    console.log(\"No of Sheets : \", xcelData.length);\n    let auctionWebData = this.getAuctionData(xcelData);\n    console.log('MTPL Players : ', auctionWebData.mtplPlayers);\n    console.log('MTPL Teams : ', auctionWebData.mtplTeams);\n\n    let returnData = {};\n\n    returnData.players = this.populatePlayerInfo(auctionWebData.mtplPlayers, auctionWebData.mtplTeams);\n    console.log(\"MTPL Players : \", returnData.players);\n    return returnData;\n  };\n\n  teamOptions = (id, mtplTeams) => {\n    let returnData = [];\n    let teams = mtplTeams.data;\n    for (let i = 3; i < teams.length; i++) {\n      let teamInfo = {};\n      teamInfo.value = id + '-' + teams[i][0];\n      teamInfo.label = teams[i][0];\n      returnData.push(teamInfo);\n    }\n    return returnData;\n  };\n\n  render() {\n\n    return (\n      <div>\n        <ReactGoogleSheets\n          clientId={Constants.CLIENT_ID}\n          apiKey={Constants.API_KEY}\n          spreadsheetId={Constants.MTPL_MENS_SPREADSHEET_ID}\n          afterLoading={() => this.setState({ sheetLoaded: true })}\n        >\n          {this.state.sheetLoaded ? this.retrieveAuctionData().players.map((item, key) =>\n            <Player item={item}  id={key} updateCell={this.props.updateCell}/>\n           ) : 'loading...'}\n        </ReactGoogleSheets>\n\n      </div>\n    )\n  }\n}\n\nexport default ReactGoogleSheets.connect(DataComponent);\n"]},"metadata":{},"sourceType":"module"}