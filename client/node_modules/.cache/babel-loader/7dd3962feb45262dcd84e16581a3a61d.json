{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nconst ColorXform = require('./color-xform');\n\nclass EdgeXform extends BaseXform {\n  constructor(name) {\n    super();\n    this.name = name;\n    this.map = {\n      color: new ColorXform()\n    };\n  }\n\n  get tag() {\n    return this.name;\n  }\n\n  render(xmlStream, model, defaultColor) {\n    const color = model && model.color || defaultColor || this.defaultColor;\n    xmlStream.openNode(this.name);\n\n    if (model && model.style) {\n      xmlStream.addAttribute('style', model.style);\n\n      if (color) {\n        this.map.color.render(xmlStream, color);\n      }\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.name:\n        {\n          const style = node.attributes.style;\n\n          if (style) {\n            this.model = {\n              style\n            };\n          } else {\n            this.model = undefined;\n          }\n\n          return true;\n        }\n\n      case 'color':\n        this.parser = this.map.color;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    if (name === this.name) {\n      if (this.map.color.model) {\n        if (!this.model) {\n          this.model = {};\n        }\n\n        this.model.color = this.map.color.model;\n      }\n    }\n\n    return false;\n  }\n\n  validStyle(value) {\n    return EdgeXform.validStyleValues[value];\n  }\n\n}\n\nEdgeXform.validStyleValues = ['thin', 'dotted', 'dashDot', 'hair', 'dashDotDot', 'slantDashDot', 'mediumDashed', 'mediumDashDotDot', 'mediumDashDot', 'medium', 'double', 'thick'].reduce((p, v) => {\n  p[v] = true;\n  return p;\n}, {}); // Border encapsulates translation from border model to/from xlsx\n\nclass BorderXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      top: new EdgeXform('top'),\n      left: new EdgeXform('left'),\n      bottom: new EdgeXform('bottom'),\n      right: new EdgeXform('right'),\n      diagonal: new EdgeXform('diagonal')\n    };\n  }\n\n  render(xmlStream, model) {\n    const color = model.color;\n    xmlStream.openNode('border');\n\n    if (model.diagonal && model.diagonal.style) {\n      if (model.diagonal.up) {\n        xmlStream.addAttribute('diagonalUp', '1');\n      }\n\n      if (model.diagonal.down) {\n        xmlStream.addAttribute('diagonalDown', '1');\n      }\n    }\n\n    function add(edgeModel, edgeXform) {\n      if (edgeModel && !edgeModel.color && model.color) {\n        // don't mess with incoming models\n        edgeModel = Object.assign({}, edgeModel, {\n          color: model.color\n        });\n      }\n\n      edgeXform.render(xmlStream, edgeModel, color);\n    }\n\n    add(model.left, this.map.left);\n    add(model.right, this.map.right);\n    add(model.top, this.map.top);\n    add(model.bottom, this.map.bottom);\n    add(model.diagonal, this.map.diagonal);\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'border':\n        this.reset();\n        this.diagonalUp = !!node.attributes.diagonalUp;\n        this.diagonalDown = !!node.attributes.diagonalDown;\n        return true;\n\n      default:\n        this.parser = this.map[node.name];\n\n        if (this.parser) {\n          this.parser.parseOpen(node);\n          return true;\n        }\n\n        return false;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    if (name === 'border') {\n      const model = this.model = {};\n\n      const add = function (key, edgeModel, extensions) {\n        if (edgeModel) {\n          if (extensions) {\n            Object.assign(edgeModel, extensions);\n          }\n\n          model[key] = edgeModel;\n        }\n      };\n\n      add('left', this.map.left.model);\n      add('right', this.map.right.model);\n      add('top', this.map.top.model);\n      add('bottom', this.map.bottom.model);\n      add('diagonal', this.map.diagonal.model, {\n        up: this.diagonalUp,\n        down: this.diagonalDown\n      });\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = BorderXform;","map":null,"metadata":{},"sourceType":"script"}