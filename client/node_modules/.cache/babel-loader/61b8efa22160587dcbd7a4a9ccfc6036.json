{"ast":null,"code":"'use strict';\n\nconst _ = require('../utils/under-dash');\n\nconst Enums = require('./enums');\n\nconst colCache = require('../utils/col-cache'); // Column defines the column properties for 1 column.\n// This includes header rows, widths, key, (style), etc.\n// Worksheet will condense the columns as appropriate during serialization\n\n\nclass Column {\n  constructor(worksheet, number, defn) {\n    this._worksheet = worksheet;\n    this._number = number;\n\n    if (defn !== false) {\n      // sometimes defn will follow\n      this.defn = defn;\n    }\n  }\n\n  get number() {\n    return this._number;\n  }\n\n  get worksheet() {\n    return this._worksheet;\n  }\n\n  get letter() {\n    return colCache.n2l(this._number);\n  }\n\n  get isCustomWidth() {\n    return this.width !== undefined && this.width !== 8;\n  }\n\n  get defn() {\n    return {\n      header: this._header,\n      key: this.key,\n      width: this.width,\n      style: this.style,\n      hidden: this.hidden,\n      outlineLevel: this.outlineLevel\n    };\n  }\n\n  set defn(value) {\n    if (value) {\n      this.key = value.key;\n      this.width = value.width;\n      this.outlineLevel = value.outlineLevel;\n\n      if (value.style) {\n        this.style = value.style;\n      } else {\n        this.style = {};\n      } // headers must be set after style\n\n\n      this.header = value.header;\n      this._hidden = !!value.hidden;\n    } else {\n      delete this._header;\n      delete this._key;\n      delete this.width;\n      this.style = {};\n      this.outlineLevel = 0;\n    }\n  }\n\n  get headers() {\n    return this._header && this._header instanceof Array ? this._header : [this._header];\n  }\n\n  get header() {\n    return this._header;\n  }\n\n  set header(value) {\n    if (value !== undefined) {\n      this._header = value;\n      this.headers.forEach((text, index) => {\n        this._worksheet.getCell(index + 1, this.number).value = text;\n      });\n    } else {\n      this._header = undefined;\n    }\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  set key(value) {\n    const column = this._key && this._worksheet.getColumnKey(this._key);\n\n    if (column === this) {\n      this._worksheet.deleteColumnKey(this._key);\n    }\n\n    this._key = value;\n\n    if (value) {\n      this._worksheet.setColumnKey(this._key, this);\n    }\n  }\n\n  get hidden() {\n    return !!this._hidden;\n  }\n\n  set hidden(value) {\n    this._hidden = value;\n  }\n\n  get outlineLevel() {\n    return this._outlineLevel || 0;\n  }\n\n  set outlineLevel(value) {\n    this._outlineLevel = value;\n  }\n\n  get collapsed() {\n    return !!(this._outlineLevel && this._outlineLevel >= this._worksheet.properties.outlineLevelCol);\n  }\n\n  toString() {\n    return JSON.stringify({\n      key: this.key,\n      width: this.width,\n      headers: this.headers.length ? this.headers : undefined\n    });\n  }\n\n  equivalentTo(other) {\n    return this.width === other.width && this.hidden === other.hidden && this.outlineLevel === other.outlineLevel && _.isEqual(this.style, other.style);\n  }\n\n  get isDefault() {\n    if (this.isCustomWidth) {\n      return false;\n    }\n\n    if (this.hidden) {\n      return false;\n    }\n\n    if (this.outlineLevel) {\n      return false;\n    }\n\n    const s = this.style;\n\n    if (s && (s.font || s.numFmt || s.alignment || s.border || s.fill)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get headerCount() {\n    return this.headers.length;\n  }\n\n  eachCell(options, iteratee) {\n    const colNumber = this.number;\n\n    if (!iteratee) {\n      iteratee = options;\n      options = null;\n    }\n\n    this._worksheet.eachRow(options, (row, rowNumber) => {\n      iteratee(row.getCell(colNumber), rowNumber);\n    });\n  }\n\n  get values() {\n    const v = [];\n    this.eachCell((cell, rowNumber) => {\n      if (cell && cell.type !== Enums.ValueType.Null) {\n        v[rowNumber] = cell.value;\n      }\n    });\n    return v;\n  }\n\n  set values(v) {\n    if (!v) {\n      return;\n    }\n\n    const colNumber = this.number;\n    let offset = 0;\n\n    if (v.hasOwnProperty('0')) {\n      // assume contiguous array, start at row 1\n      offset = 1;\n    }\n\n    v.forEach((value, index) => {\n      this._worksheet.getCell(index + offset, colNumber).value = value;\n    });\n  } // =========================================================================\n  // styles\n\n\n  _applyStyle(name, value) {\n    this.style[name] = value;\n    this.eachCell(cell => {\n      cell[name] = value;\n    });\n    return value;\n  }\n\n  get numFmt() {\n    return this.style.numFmt;\n  }\n\n  set numFmt(value) {\n    this._applyStyle('numFmt', value);\n  }\n\n  get font() {\n    return this.style.font;\n  }\n\n  set font(value) {\n    this._applyStyle('font', value);\n  }\n\n  get alignment() {\n    return this.style.alignment;\n  }\n\n  set alignment(value) {\n    this._applyStyle('alignment', value);\n  }\n\n  get border() {\n    return this.style.border;\n  }\n\n  set border(value) {\n    this._applyStyle('border', value);\n  }\n\n  get fill() {\n    return this.style.fill;\n  }\n\n  set fill(value) {\n    this._applyStyle('fill', value);\n  } // =============================================================================\n  // static functions\n\n\n  static toModel(columns) {\n    // Convert array of Column into compressed list cols\n    const cols = [];\n    let col = null;\n\n    if (columns) {\n      columns.forEach((column, index) => {\n        if (column.isDefault) {\n          if (col) {\n            col = null;\n          }\n        } else if (!col || !column.equivalentTo(col)) {\n          col = {\n            min: index + 1,\n            max: index + 1,\n            width: column.width,\n            style: column.style,\n            isCustomWidth: column.isCustomWidth,\n            hidden: column.hidden,\n            outlineLevel: column.outlineLevel,\n            collapsed: column.collapsed\n          };\n          cols.push(col);\n        } else {\n          col.max = index + 1;\n        }\n      });\n    }\n\n    return cols.length ? cols : undefined;\n  }\n\n  static fromModel(worksheet, cols) {\n    cols = cols || [];\n    const columns = [];\n    let count = 1;\n    let index = 0;\n\n    while (index < cols.length) {\n      const col = cols[index++];\n\n      while (count < col.min) {\n        columns.push(new Column(worksheet, count++));\n      }\n\n      while (count <= col.max) {\n        columns.push(new Column(worksheet, count++, col));\n      }\n    }\n\n    return columns.length ? columns : null;\n  }\n\n}\n\nmodule.exports = Column;","map":null,"metadata":{},"sourceType":"script"}