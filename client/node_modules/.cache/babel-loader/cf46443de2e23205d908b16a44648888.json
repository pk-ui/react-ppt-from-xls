{"ast":null,"code":"var _jsxFileName = \"/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js\";\nimport ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants';\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetLoaded: false,\n      players: {},\n      teams: {},\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n    };\n  }\n\n  render() {\n    const populatePlayerInfo = players => {\n      let returnData = {};\n      let playersData = players.data;\n\n      for (let i = 1; i < playersData.length; i++) {\n        let playerProfile = {};\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        returnData[playerProfile.playerId] = playerProfile;\n      }\n\n      return returnData;\n    };\n\n    const populateTeams = mtplTeams => {\n      let returnData = {};\n      let teams = mtplTeams.data;\n\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.name = teams[i][0];\n        teamInfo.ownerName = teams[i][1];\n        teamInfo.isOwnerPlayer = teams[i][2];\n        teamInfo.amount = teams[i][3];\n        teamInfo.amountSpent = teams[i][4];\n        teamInfo.amountBalance = teams[i][5];\n        teamInfo.playerCount = teams[i][6];\n        teamInfo.remainingPlayerCount = teams[i][7];\n        teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n        teamInfo.ownerPlayerId = teams[i][9];\n        teamInfo.retainedPlayerId = teams[i][10];\n        returnData[teamInfo.name] = teamInfo;\n      }\n\n      return returnData;\n    };\n\n    const getAuctionData = xcelData => {\n      let auctionData = {};\n\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return auctionData;\n    };\n\n    const createPlayerProfile = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionData = getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionData.mtplTeams);\n      let players = populatePlayerInfo(auctionData.mtplPlayers);\n      let teams = populateTeams(auctionData.mtplTeams);\n      return React.createElement(\"div\", {\n        className: \"AuctionBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Previous\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: () => {\n          this.props.updateCell('MTPL Players', // sheetName\n          'G', // column\n          4, // row\n          'Sholay - 11', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n          this.props.updateCell('MTPL Players', // sheetName\n          'I', // column\n          4, // row\n          '50000', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"update cell!\"));\n    };\n\n    return React.createElement(ReactGoogleSheets, {\n      clientId: Constants.CLIENT_ID,\n      apiKey: Constants.API_KEY,\n      spreadsheetId: Constants.MTPL_MENS_SPREADSHEET_ID,\n      afterLoading: () => this.setState({\n        sheetLoaded: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, this.state.sheetLoaded ? createPlayerProfile() : 'loading...');\n  }\n\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);","map":{"version":3,"sources":["/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js"],"names":["ReactGoogleSheets","Constants","React","Component","testDataComponent","constructor","props","state","sheetLoaded","players","teams","currentPlayerId","nextPlayerId","prevPlayerId","render","populatePlayerInfo","returnData","playersData","data","i","length","playerProfile","playerId","populateTeams","mtplTeams","teamInfo","name","ownerName","isOwnerPlayer","amount","amountSpent","amountBalance","playerCount","remainingPlayerCount","maxAllowedBidOnNextPlayer","ownerPlayerId","retainedPlayerId","getAuctionData","xcelData","auctionData","mtplPlayers","createPlayerProfile","getSheetsData","console","log","updateCell","error","CLIENT_ID","API_KEY","MTPL_MENS_SPREADSHEET_ID","setState","connect"],"mappings":"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","sourcesContent":["import ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants'\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      sheetLoaded: false,\n      players: {},\n      teams: {},\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n\n    }\n  }\n  render() {\n\n    const populatePlayerInfo = (players) => {\n      let returnData = {};\n      let playersData = players.data;\n      for (let i = 1; i < playersData.length; i++) {\n        let playerProfile = {};\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        playerProfile.playerId = playersData[i][0];\n        \n        returnData[playerProfile.playerId] = playerProfile;\n      }\n      return returnData;\n    }\n\n    const populateTeams = (mtplTeams) => {\n      let returnData = {};\n      let teams = mtplTeams.data;\n      for (let i = 3; i < teams.length; i++) {\n        let teamInfo = {};\n        teamInfo.name = teams[i][0];\n        teamInfo.ownerName = teams[i][1];\n        teamInfo.isOwnerPlayer = teams[i][2];\n        teamInfo.amount = teams[i][3];\n        teamInfo.amountSpent = teams[i][4];\n        teamInfo.amountBalance = teams[i][5];\n        teamInfo.playerCount = teams[i][6];\n        teamInfo.remainingPlayerCount = teams[i][7];\n        teamInfo.maxAllowedBidOnNextPlayer = teams[i][8];\n        teamInfo.ownerPlayerId = teams[i][9];\n        teamInfo.retainedPlayerId = teams[i][10];\n        returnData[teamInfo.name] = teamInfo;\n      }\n      return returnData;\n    }\n\n    const getAuctionData = (xcelData) => {\n      let auctionData = {};\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n          default:\n            break;\n        }\n      }\n      return auctionData;\n    }\n\n    const createPlayerProfile = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionData = getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionData.mtplTeams);\n\n      let players = populatePlayerInfo(auctionData.mtplPlayers);\n      let teams = populateTeams(auctionData.mtplTeams);\n\n      return (\n        <div className=\"AuctionBody\">\n          {/* Access Data */}\n\n          { /* this.state.players.push(); */}\n\n          {/* Previous Player Info*/}\n          <button onClick={() => {\n\n          }}>Previous</button>\n\n          <div>\n\n          </div>\n\n          {/* Next Player Info*/}\n          <button onClick={() => {\n\n          }}>Next</button>\n\n          {/* Update Data */}\n          <button onClick={() => {\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'G', // column\n              4, // row\n              'Sholay - 11', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'I', // column\n              4, // row\n              '50000', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n          }}>update cell!</button>\n        </div>\n      )\n    }\n\n    return (\n      <ReactGoogleSheets\n        clientId={Constants.CLIENT_ID}\n        apiKey={Constants.API_KEY}\n        spreadsheetId={Constants.MTPL_MENS_SPREADSHEET_ID}\n        afterLoading={() => this.setState({ sheetLoaded: true })}\n      >\n        {this.state.sheetLoaded ? createPlayerProfile() : 'loading...'}\n      </ReactGoogleSheets>\n    )\n  }\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);\n"]},"metadata":{},"sourceType":"module"}