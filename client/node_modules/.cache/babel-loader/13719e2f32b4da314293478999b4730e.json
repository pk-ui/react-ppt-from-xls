{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nconst AlignmentXform = require('./alignment-xform');\n\nconst BorderXform = require('./border-xform');\n\nconst FillXform = require('./fill-xform');\n\nconst FontXform = require('./font-xform');\n\nconst NumFmtXform = require('./numfmt-xform'); // <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\n//   Optional <alignment>\n// </xf>\n// Style assists translation from style model to/from xlsx\n\n\nclass DxfXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      alignment: new AlignmentXform(),\n      border: new BorderXform(),\n      fill: new FillXform(),\n      font: new FontXform(),\n      numFmt: new NumFmtXform()\n    };\n  }\n\n  get tag() {\n    return 'dxf';\n  } // how do we generate dxfid?\n\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n\n    if (model.alignment) {\n      this.map.alignment.render(xmlStream, model.alignment);\n    }\n\n    if (model.border) {\n      this.map.border.render(xmlStream, model.border);\n    }\n\n    if (model.fill) {\n      this.map.fill.render(xmlStream, model.fill);\n    }\n\n    if (model.font) {\n      this.map.font.render(xmlStream, model.font);\n    }\n\n    if (model.numFmt) {\n      this.map.numFmt.render(xmlStream, model.numFmt);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        return true;\n\n      default:\n        this.parser = this.map[node.name];\n\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n\n        return true;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    if (name === this.tag) {\n      this.model = {\n        alignment: this.map.alignment.model,\n        border: this.map.border.model,\n        fill: this.map.fill.model,\n        font: this.map.font.model,\n        numFmt: this.map.numFmt.model\n      };\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nmodule.exports = DxfXform;","map":null,"metadata":{},"sourceType":"script"}