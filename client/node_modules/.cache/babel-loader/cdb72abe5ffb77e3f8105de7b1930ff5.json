{"ast":null,"code":"const XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\n\nconst RelationshipXform = require('./relationship-xform');\n\nclass RelationshipsXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      Relationship: new RelationshipXform()\n    };\n  }\n\n  render(xmlStream, model) {\n    model = model || this._values;\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode('Relationships', RelationshipsXform.RELATIONSHIPS_ATTRIBUTES);\n    const self = this;\n    model.forEach(relationship => {\n      self.map.Relationship.render(xmlStream, relationship);\n    });\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'Relationships':\n        this.model = [];\n        return true;\n\n      default:\n        this.parser = this.map[node.name];\n\n        if (this.parser) {\n          this.parser.parseOpen(node);\n          return true;\n        }\n\n        throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.push(this.parser.model);\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    switch (name) {\n      case 'Relationships':\n        return false;\n\n      default:\n        throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n    }\n  }\n\n}\n\nRelationshipsXform.RELATIONSHIPS_ATTRIBUTES = {\n  xmlns: 'http://schemas.openxmlformats.org/package/2006/relationships'\n};\nmodule.exports = RelationshipsXform;","map":null,"metadata":{},"sourceType":"script"}