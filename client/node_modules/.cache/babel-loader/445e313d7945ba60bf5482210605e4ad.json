{"ast":null,"code":"const colCache = require('./../utils/col-cache');\n\nclass Table {\n  constructor(worksheet, table) {\n    this.worksheet = worksheet;\n\n    if (table) {\n      this.table = table;\n      this.validate();\n      this.store();\n    }\n  }\n\n  getFormula(column) {\n    // get the correct formula to apply to the totals row\n    switch (column.totalsRowFunction) {\n      case 'none':\n        return null;\n\n      case 'average':\n        return \"SUBTOTAL(101,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'countNums':\n        return \"SUBTOTAL(102,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'count':\n        return \"SUBTOTAL(103,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'max':\n        return \"SUBTOTAL(104,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'min':\n        return \"SUBTOTAL(105,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'stdDev':\n        return \"SUBTOTAL(106,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'var':\n        return \"SUBTOTAL(107,\".concat(this.table.name, \"[\").concat(column.name, \"])\");\n\n      case 'custom':\n        return column.totalsRowFormula;\n\n      default:\n        throw new Error(\"Invalid Totals Row Function: \".concat(column.totalsRowFunction));\n    }\n  }\n\n  validate() {\n    const table = this.table; // set defaults and check is valid\n\n    const assign = (o, name, dflt) => {\n      if (o[name] === undefined) {\n        o[name] = dflt;\n      }\n    };\n\n    assign(table, 'headerRow', true);\n    assign(table, 'totalsRow', false);\n    assign(table, 'style', {});\n    assign(table.style, 'theme', 'TableStyleMedium2');\n    assign(table.style, 'showFirstColumn', false);\n    assign(table.style, 'showLastColumn', false);\n    assign(table.style, 'showRowStripes', false);\n    assign(table.style, 'showColumnStripes', false);\n\n    const assert = (test, message) => {\n      if (!test) {\n        throw new Error(message);\n      }\n    };\n\n    assert(table.ref, 'Table must have ref');\n    assert(table.columns, 'Table must have column definitions');\n    assert(table.rows, 'Table must have row definitions');\n    table.tl = colCache.decodeAddress(table.ref);\n    const _table$tl = table.tl,\n          row = _table$tl.row,\n          col = _table$tl.col;\n    assert(row > 0, 'Table must be on valid row');\n    assert(col > 0, 'Table must be on valid col');\n    const width = table.columns.length;\n    const height = table.rows.length;\n    const filterHeight = height + (table.headerRow ? 1 : 0);\n    const tableHeight = filterHeight + (table.totalsRow ? 1 : 0); // autoFilterRef is a range that includes optional headers only\n\n    table.autoFilterRef = colCache.encode(row, col, row + filterHeight - 1, col + width - 1); // tableRef is a range that includes optional headers and totals\n\n    table.tableRef = colCache.encode(row, col, row + tableHeight - 1, col + width - 1);\n    table.columns.forEach((column, i) => {\n      assert(column.name, \"Column \".concat(i, \" must have a name\"));\n\n      if (i === 0) {\n        assign(column, 'totalsRowLabel', 'Total');\n      } else {\n        assign(column, 'totalsRowFunction', 'none');\n        column.totalsRowFormula = this.getFormula(column);\n      }\n    });\n  }\n\n  store() {\n    // where the table needs to store table data, headers, footers in\n    // the sheet...\n    const assignStyle = (cell, style) => {\n      if (style) {\n        Object.keys(style).forEach(key => {\n          cell[key] = style[key];\n        });\n      }\n    };\n\n    const worksheet = this.worksheet,\n          table = this.table;\n    const _table$tl2 = table.tl,\n          row = _table$tl2.row,\n          col = _table$tl2.col;\n    let count = 0;\n\n    if (table.headerRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const style = column.style,\n              name = column.name;\n        const cell = r.getCell(col + j);\n        cell.value = name;\n        assignStyle(cell, style);\n      });\n    }\n\n    table.rows.forEach(data => {\n      const r = worksheet.getRow(row + count++);\n      data.forEach((value, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = value;\n        assignStyle(cell, table.columns[j].style);\n      });\n    });\n\n    if (table.totalsRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n\n        if (j === 0) {\n          cell.value = column.totalsRowLabel;\n        } else {\n          const formula = this.getFormula(column);\n\n          if (formula) {\n            cell.value = {\n              formula: column.totalsRowFormula,\n              result: column.totalsRowResult\n            };\n          }\n        }\n\n        assignStyle(cell, column.style);\n      });\n    }\n  }\n\n  load(worksheet) {\n    // where the table will read necessary features from a loaded sheet\n    const table = this.table;\n    const _table$tl3 = table.tl,\n          row = _table$tl3.row,\n          col = _table$tl3.col;\n    let count = 0;\n\n    if (table.headerRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = column.name;\n      });\n    }\n\n    table.rows.forEach(data => {\n      const r = worksheet.getRow(row + count++);\n      data.forEach((value, j) => {\n        const cell = r.getCell(col + j);\n        cell.value = value;\n      });\n    });\n\n    if (table.totalsRow) {\n      const r = worksheet.getRow(row + count++);\n      table.columns.forEach((column, j) => {\n        const cell = r.getCell(col + j);\n\n        if (j === 0) {\n          cell.value = column.totalsRowLabel;\n        } else {\n          const formula = this.getFormula(column);\n\n          if (formula) {\n            cell.value = {\n              formula: column.totalsRowFormula,\n              result: column.totalsRowResult\n            };\n          }\n        }\n      });\n    }\n  }\n\n  get model() {\n    return this.table;\n  }\n\n  set model(value) {\n    this.table = value;\n  } // ================================================================\n  // TODO: Mutating methods\n\n\n  cacheState() {\n    if (!this._cache) {\n      this._cache = {\n        ref: this.ref\n      };\n    }\n  }\n  /* eslint-disable no-unused-vars */\n\n\n  addRow(values, rowNumber) {\n    // Add a row of data, either insert at rowNumber or append\n    this.cacheState();\n  }\n\n  removeRow(rowNumber) {\n    // Remove a row of data\n    this.cacheState();\n  }\n\n  addColumn(column, values, colNumber) {\n    // Add a new column, including column defn and values\n    // Inserts at colNumber or adds to the right\n    this.cacheState();\n  }\n\n  removeColumn(colNumber) {\n    // Remove a column with data\n    this.cacheState();\n  }\n\n  assign(target, prop, value) {\n    this.cacheState();\n    target[prop] = value;\n  }\n  /* eslint-disable lines-between-class-members */\n\n\n  get ref() {\n    return this.table.ref;\n  }\n\n  set ref(value) {\n    this.assign(this.table, 'ref', value);\n  }\n\n  get name() {\n    return this.table.name;\n  }\n\n  set name(value) {\n    this.table.name = value;\n  }\n\n  get displayName() {\n    return this.table.displyName || this.table.name;\n  }\n\n  set displayNamename(value) {\n    this.table.displayName = value;\n  }\n\n  get headerRow() {\n    return this.table.headerRow;\n  }\n\n  set headerRow(value) {\n    this.assign(this.table, 'headerRow', value);\n  }\n\n  get totalsRow() {\n    return this.table.totalsRow;\n  }\n\n  set totalsRow(value) {\n    this.assign(this.table, 'totalsRow', value);\n  }\n\n  get theme() {\n    return this.table.style.name;\n  }\n\n  set theme(value) {\n    this.table.style.name = value;\n  }\n\n  get showFirstColumn() {\n    return this.table.style.showFirstColumn;\n  }\n\n  set showFirstColumn(value) {\n    this.table.style.showFirstColumn = value;\n  }\n\n  get showLastColumn() {\n    return this.table.style.showLastColumn;\n  }\n\n  set showLastColumn(value) {\n    this.table.style.showLastColumn = value;\n  }\n\n  get showRowStripes() {\n    return this.table.style.showRowStripes;\n  }\n\n  set showRowStripes(value) {\n    this.table.style.showRowStripes = value;\n  }\n\n  get showColumnStripes() {\n    return this.table.style.showColumnStripes;\n  }\n\n  set showColumnStripes(value) {\n    this.table.style.showColumnStripes = value;\n  }\n\n}\n\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}