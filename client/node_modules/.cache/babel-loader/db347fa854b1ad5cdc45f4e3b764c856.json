{"ast":null,"code":"'use strict';\n\nconst colCache = require('./../utils/col-cache'); // used by worksheet to calculate sheet dimensions\n\n\nclass Range {\n  constructor() {\n    this.decode(arguments);\n  }\n\n  setTLBR(t, l, b, r, s) {\n    if (arguments.length < 4) {\n      // setTLBR(tl, br, s)\n      const tl = colCache.decodeAddress(t);\n      const br = colCache.decodeAddress(l);\n      this.model = {\n        top: Math.min(tl.row, br.row),\n        left: Math.min(tl.col, br.col),\n        bottom: Math.max(tl.row, br.row),\n        right: Math.max(tl.col, br.col),\n        sheetName: b\n      };\n      this.setTLBR(tl.row, tl.col, br.row, br.col, s);\n    } else {\n      // setTLBR(t, l, b, r, s)\n      this.model = {\n        top: Math.min(t, b),\n        left: Math.min(l, r),\n        bottom: Math.max(t, b),\n        right: Math.max(l, r),\n        sheetName: s\n      };\n    }\n  }\n\n  decode(argv) {\n    switch (argv.length) {\n      case 5:\n        // [t,l,b,r,s]\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3], argv[4]);\n        break;\n\n      case 4:\n        // [t,l,b,r]\n        this.setTLBR(argv[0], argv[1], argv[2], argv[3]);\n        break;\n\n      case 3:\n        // [tl,br,s]\n        this.setTLBR(argv[0], argv[1], argv[2]);\n        break;\n\n      case 2:\n        // [tl,br]\n        this.setTLBR(argv[0], argv[1]);\n        break;\n\n      case 1:\n        {\n          const value = argv[0];\n\n          if (value instanceof Range) {\n            // copy constructor\n            this.model = {\n              top: value.model.top,\n              left: value.model.left,\n              bottom: value.model.bottom,\n              right: value.model.right,\n              sheetName: value.sheetName\n            };\n          } else if (value instanceof Array) {\n            // an arguments array\n            this.decode(value);\n          } else if (value.top && value.left && value.bottom && value.right) {\n            // a model\n            this.model = {\n              top: value.top,\n              left: value.left,\n              bottom: value.bottom,\n              right: value.right,\n              sheetName: value.sheetName\n            };\n          } else {\n            // [sheetName!]tl:br\n            const tlbr = colCache.decodeEx(value);\n\n            if (tlbr.top) {\n              this.model = {\n                top: tlbr.top,\n                left: tlbr.left,\n                bottom: tlbr.bottom,\n                right: tlbr.right,\n                sheetName: tlbr.sheetName\n              };\n            } else {\n              this.model = {\n                top: tlbr.row,\n                left: tlbr.col,\n                bottom: tlbr.row,\n                right: tlbr.col,\n                sheetName: tlbr.sheetName\n              };\n            }\n          }\n\n          break;\n        }\n\n      case 0:\n        this.model = {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0\n        };\n        break;\n\n      default:\n        throw new Error(\"Invalid number of arguments to _getDimensions() - \".concat(argv.length));\n    }\n  }\n\n  get top() {\n    return this.model.top || 1;\n  }\n\n  set top(value) {\n    this.model.top = value;\n  }\n\n  get left() {\n    return this.model.left || 1;\n  }\n\n  set left(value) {\n    this.model.left = value;\n  }\n\n  get bottom() {\n    return this.model.bottom || 1;\n  }\n\n  set bottom(value) {\n    this.model.bottom = value;\n  }\n\n  get right() {\n    return this.model.right || 1;\n  }\n\n  set right(value) {\n    this.model.right = value;\n  }\n\n  get sheetName() {\n    return this.model.sheetName;\n  }\n\n  set sheetName(value) {\n    this.model.sheetName = value;\n  }\n\n  get _serialisedSheetName() {\n    const sheetName = this.model.sheetName;\n\n    if (sheetName) {\n      if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\n        return \"\".concat(sheetName, \"!\");\n      }\n\n      return \"'\".concat(sheetName, \"'!\");\n    }\n\n    return '';\n  }\n\n  expand(top, left, bottom, right) {\n    if (!this.model.top || top < this.top) this.top = top;\n    if (!this.model.left || left < this.left) this.left = left;\n    if (!this.model.bottom || bottom > this.bottom) this.bottom = bottom;\n    if (!this.model.right || right > this.right) this.right = right;\n  }\n\n  expandRow(row) {\n    if (row) {\n      const dimensions = row.dimensions,\n            number = row.number;\n\n      if (dimensions) {\n        this.expand(number, dimensions.min, number, dimensions.max);\n      }\n    }\n  }\n\n  expandToAddress(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    this.expand(address.row, address.col, address.row, address.col);\n  }\n\n  get tl() {\n    return colCache.n2l(this.left) + this.top;\n  }\n\n  get $t$l() {\n    return \"$\".concat(colCache.n2l(this.left), \"$\").concat(this.top);\n  }\n\n  get br() {\n    return colCache.n2l(this.right) + this.bottom;\n  }\n\n  get $b$r() {\n    return \"$\".concat(colCache.n2l(this.right), \"$\").concat(this.bottom);\n  }\n\n  get range() {\n    return \"\".concat(this._serialisedSheetName + this.tl, \":\").concat(this.br);\n  }\n\n  get $range() {\n    return \"\".concat(this._serialisedSheetName + this.$t$l, \":\").concat(this.$b$r);\n  }\n\n  get shortRange() {\n    return this.count > 1 ? this.range : this._serialisedSheetName + this.tl;\n  }\n\n  get $shortRange() {\n    return this.count > 1 ? this.$range : this._serialisedSheetName + this.$t$l;\n  }\n\n  get count() {\n    return (1 + this.bottom - this.top) * (1 + this.right - this.left);\n  }\n\n  toString() {\n    return this.range;\n  }\n\n  intersects(other) {\n    if (other.sheetName && this.sheetName && other.sheetName !== this.sheetName) return false;\n    if (other.bottom < this.top) return false;\n    if (other.top > this.bottom) return false;\n    if (other.right < this.left) return false;\n    if (other.left > this.right) return false;\n    return true;\n  }\n\n  contains(addressStr) {\n    const address = colCache.decodeEx(addressStr);\n    return this.containsEx(address);\n  }\n\n  containsEx(address) {\n    if (address.sheetName && this.sheetName && address.sheetName !== this.sheetName) return false;\n    return address.row >= this.top && address.row <= this.bottom && address.col >= this.left && address.col <= this.right;\n  }\n\n}\n\nmodule.exports = Range;","map":null,"metadata":{},"sourceType":"script"}