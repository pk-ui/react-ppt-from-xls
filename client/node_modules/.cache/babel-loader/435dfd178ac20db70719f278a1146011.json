{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst csv = require('fast-csv');\n\nconst moment = require('moment');\n\nconst PromiseLib = require('../utils/promise');\n\nconst StreamBuf = require('../utils/stream-buf');\n\nconst utils = require('../utils/utils');\n\nconst CSV = module.exports = function (workbook) {\n  this.workbook = workbook;\n  this.worksheet = null;\n};\n/* eslint-disable quote-props */\n\n\nconst SpecialValues = {\n  true: true,\n  false: false,\n  '#N/A': {\n    error: '#N/A'\n  },\n  '#REF!': {\n    error: '#REF!'\n  },\n  '#NAME?': {\n    error: '#NAME?'\n  },\n  '#DIV/0!': {\n    error: '#DIV/0!'\n  },\n  '#NULL!': {\n    error: '#NULL!'\n  },\n  '#VALUE!': {\n    error: '#VALUE!'\n  },\n  '#NUM!': {\n    error: '#NUM!'\n  }\n};\n/* eslint-ensable quote-props */\n\nCSV.prototype = {\n  readFile(filename, options) {\n    const self = this;\n    options = options || {};\n    let stream;\n    return utils.fs.exists(filename).then(exists => {\n      if (!exists) {\n        throw new Error(\"File not found: \".concat(filename));\n      }\n\n      stream = fs.createReadStream(filename);\n      return self.read(stream, options);\n    }).then(worksheet => {\n      stream.close();\n      return worksheet;\n    });\n  },\n\n  read(stream, options) {\n    options = options || {};\n    return new PromiseLib.Promise((resolve, reject) => {\n      const csvStream = this.createInputStream(options).on('worksheet', resolve).on('error', reject);\n      stream.pipe(csvStream);\n    });\n  },\n\n  createInputStream(options) {\n    options = options || {};\n    const worksheet = this.workbook.addWorksheet(options.sheetName);\n    const dateFormats = options.dateFormats || [moment.ISO_8601, 'MM-DD-YYYY', 'YYYY-MM-DD'];\n\n    const map = options.map || function (datum) {\n      if (datum === '') {\n        return null;\n      }\n\n      const datumNumber = Number(datum);\n\n      if (!Number.isNaN(datumNumber)) {\n        return datumNumber;\n      }\n\n      const dt = moment(datum, dateFormats, true);\n\n      if (dt.isValid()) {\n        return new Date(dt.valueOf());\n      }\n\n      const special = SpecialValues[datum];\n\n      if (special !== undefined) {\n        return special;\n      }\n\n      return datum;\n    };\n\n    const csvStream = csv(options).on('data', data => {\n      worksheet.addRow(data.map(map));\n    }).on('end', () => {\n      csvStream.emit('worksheet', worksheet);\n    });\n    return csvStream;\n  },\n\n  write(stream, options) {\n    return new PromiseLib.Promise((resolve, reject) => {\n      options = options || {}; // const encoding = options.encoding || 'utf8';\n      // const separator = options.separator || ',';\n      // const quoteChar = options.quoteChar || '\\'';\n\n      const worksheet = this.workbook.getWorksheet(options.sheetName || options.sheetId);\n      const csvStream = csv.createWriteStream(options);\n      stream.on('finish', () => {\n        resolve();\n      });\n      csvStream.on('error', reject);\n      csvStream.pipe(stream);\n      const _options = options,\n            dateFormat = _options.dateFormat,\n            dateUTC = _options.dateUTC;\n\n      const map = options.map || (value => {\n        if (value) {\n          if (value.text || value.hyperlink) {\n            return value.hyperlink || value.text || '';\n          }\n\n          if (value.formula || value.result) {\n            return value.result || '';\n          }\n\n          if (value instanceof Date) {\n            if (dateFormat) {\n              return dateUTC ? moment.utc(value).format(dateFormat) : moment(value).format(dateFormat);\n            }\n\n            return dateUTC ? moment.utc(value).format() : moment(value).format();\n          }\n\n          if (value.error) {\n            return value.error;\n          }\n\n          if (typeof value === 'object') {\n            return JSON.stringify(value);\n          }\n        }\n\n        return value;\n      });\n\n      const includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;\n      let lastRow = 1;\n\n      if (worksheet) {\n        worksheet.eachRow((row, rowNumber) => {\n          if (includeEmptyRows) {\n            while (lastRow++ < rowNumber - 1) {\n              csvStream.write([]);\n            }\n          }\n\n          const values = row.values;\n          values.shift();\n          csvStream.write(values.map(map));\n          lastRow = rowNumber;\n        });\n      }\n\n      csvStream.end();\n    });\n  },\n\n  writeFile(filename, options) {\n    options = options || {};\n    const streamOptions = {\n      encoding: options.encoding || 'utf8'\n    };\n    const stream = fs.createWriteStream(filename, streamOptions);\n    return this.write(stream, options);\n  },\n\n  writeBuffer(options) {\n    const self = this;\n    const stream = new StreamBuf();\n    return self.write(stream, options).then(() => stream.read());\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}