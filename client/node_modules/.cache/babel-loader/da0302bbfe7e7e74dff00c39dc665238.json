{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar fetch = require(\"isomorphic-fetch\");\n\nvar camelCase = require(\"camelcase\"); // subtituted code of <script src=\"https://apis.google.com/js/api.js\"></script> at index.html\n\n\nvar gapi = require(\"./gapi\");\n\nfunction GoogleSheetConnector(options, onLoad) {\n  var _this = this;\n\n  var sheetsData = [];\n  this.sheetsLoaded = 0;\n  this.apiKey = options.apiKey;\n  this.clientId = options.clientId;\n  this.spreadsheetId = options.spreadsheetId;\n  this.initialise();\n\n  this.getSheetsData = function () {\n    return sheetsData.slice();\n  };\n\n  this.setSheetsData = function (data) {\n    sheetsData = data;\n    this.sheetsLoaded++;\n\n    if (this.sheetsLoaded === this.numSheets) {\n      onDataLoaded.call(this);\n    }\n  };\n\n  function onDataLoaded() {\n    this.setSheetsData = null;\n    console.info(\"Data successfuly loaded from Spreadsheet\");\n\n    if (onLoad) {\n      onLoad.call(this);\n    }\n  }\n\n  this.updateCell = function (sheetName, column, row, value, successCallback, errorCallback) {\n    var data = {\n      spreadsheetId: _this.spreadsheetId,\n      range: sheetName + '!' + column + row,\n      valueInputOption: 'USER_ENTERED',\n      values: [[value]]\n    };\n    gapi.client.sheets.spreadsheets.values.update(data).then(successCallback, errorCallback);\n  };\n}\n\nGoogleSheetConnector.prototype = {\n  initialise: function initialise() {\n    console.info(\"Loading data from Spreadsheet\");\n\n    if (this.clientId) {\n      return gapi.load(\"client:auth2\", this.initClient.bind(this));\n    } else if (this.apiKey) {\n      var url = [\"https://sheets.googleapis.com/v4/spreadsheets/\", this.spreadsheetId, \"?key=\", this.apiKey].join(\"\");\n      fetch(url).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        return this.loadSheetsData(data);\n      }.bind(this));\n    } else {\n      console.info(\"You must specify a valid Client ID or API Key\");\n    }\n  },\n  loadSheetsData: function loadSheetsData(data) {\n    this.numSheets = data.sheets.length;\n    data.sheets.forEach(function (sheet) {\n      return this.loadSheetViaKey(sheet.properties.title);\n    }, this);\n  },\n  loadSpreadsheet: function loadSpreadsheet() {\n    gapi.client.sheets.spreadsheets.get({\n      spreadsheetId: this.spreadsheetId\n    }).then(function (response) {\n      var sheets = JSON.parse(response.body).sheets;\n      this.numSheets = sheets.length;\n      sheets.forEach(this.loadSheetViaAuth, this);\n    }.bind(this));\n  },\n  loadSheetViaAuth: function loadSheetViaAuth(sheet) {\n    gapi.client.sheets.spreadsheets.values.get({\n      spreadsheetId: this.spreadsheetId,\n      range: sheet.properties.title\n    }).then(function (response) {\n      var values = JSON.parse(response.body).values;\n      this.loadSheet(sheet.properties.title, values);\n    }.bind(this));\n  },\n  loadSheetViaKey: function loadSheetViaKey(sheetName) {\n    var url = [\"https://sheets.googleapis.com/v4/spreadsheets/\", this.spreadsheetId, \"/values/\", sheetName, \"?key=\", this.apiKey].join(\"\");\n    fetch(url).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      var values = json.values;\n      this.loadSheet(sheetName, values);\n    }.bind(this));\n  },\n  loadSheet: function loadSheet(sheetName, values) {\n    var headerRow = values[0];\n    var dataRows = values.slice(1);\n    var keys = headerRow.map(function (value) {\n      return camelCase(value);\n    }, this);\n    var sheetsData = this.getSheetsData();\n    sheetsData = sheetsData.concat({\n      name: sheetName,\n      header: headerRow,\n      keys: keys,\n      data: this.loadRowsData(keys, dataRows)\n    });\n    this.setSheetsData(sheetsData);\n  },\n  loadRowsData: function loadRowsData(keys, values) {\n    return values.map(function (row) {\n      keys.forEach(function (key, i) {\n        row[key] = row[i];\n      });\n      return row;\n    });\n  },\n  initClient: function initClient() {\n    gapi.client.init({\n      discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n      clientId: this.clientId,\n      scope: \"https://www.googleapis.com/auth/spreadsheets\"\n    }).then(function () {\n      var authInstance = gapi.auth2.getAuthInstance();\n\n      if (authInstance.isSignedIn.get()) {\n        this.loadSpreadsheet();\n      } else {\n        authInstance.isSignedIn.listen(this.updateSigninStatus.bind(this));\n        authInstance.signIn();\n      }\n    }.bind(this));\n  },\n  updateSigninStatus: function updateSigninStatus(isSignedIn) {\n    if (isSignedIn) {\n      this.loadSpreadsheet();\n    }\n  },\n  getSheet: function getSheet(sheetName) {\n    return new SheetData(this.getSheetsData(), sheetName);\n  }\n};\n\nfunction SheetData(sheetsData, sheetName) {\n  var sheet = sheetsData.find(function (sheet) {\n    return sheet.name === sheetName;\n  }) || {\n    data: [],\n    values: []\n  };\n  this.header = sheet.header;\n  this.keys = sheet.keys;\n  var data = sheet.data;\n  var currentData = data.slice();\n\n  this.getData = function () {\n    return data.slice();\n  };\n\n  this.getCurrentData = function () {\n    return currentData.slice();\n  };\n\n  this.setCurrentData = function (newData) {\n    currentData = newData;\n  };\n}\n\nSheetData.prototype = {\n  map: function map(callback) {\n    return this.getCurrentData().map(callback);\n  },\n  filter: function filter(filterObj, strValue) {\n    var newData = this.getData().filter(function (row) {\n      if ((typeof filterObj === \"undefined\" ? \"undefined\" : _typeof(filterObj)) === \"object\") {\n        for (var i in filterObj) {\n          if (!row.hasOwnProperty(i) || row[i] !== filterObj[i]) {\n            return false;\n          }\n        }\n      } else {\n        var colIndex = this.header.indexOf(filterObj);\n        if (row[colIndex] !== strValue) return false;\n      }\n\n      return true;\n    }, this);\n    this.setCurrentData(newData);\n    return this;\n  },\n  group: function group(colName, sort) {\n    var groups = [];\n    var colIndex = this.header.indexOf(colName);\n    if (colIndex === -1) return this;\n    this.getCurrentData().forEach(function (row) {\n      var groupName = row[colIndex];\n      var groupIndex = -1;\n      groups.forEach(function (group, i) {\n        if (group.name === groupName) groupIndex = i;\n      });\n\n      if (groupIndex > -1) {\n        groups[groupIndex].data.push(row);\n      } else {\n        groups.push({\n          name: groupName,\n          data: [row]\n        });\n      }\n    });\n    if (sort) sortArray(groups, \"name\");\n    this.setCurrentData(groups);\n    this.dataIsGrouped = true;\n    return this;\n  },\n  sort: function sort(colName) {\n    var newData = this.getCurrentData();\n\n    if (this.dataIsGrouped) {\n      newData.forEach(function (group) {\n        sortArray(group.data, camelCase(colName));\n      });\n    } else {\n      sortArray(newData, camelCase(colName));\n    }\n\n    this.setCurrentData(newData);\n    return this;\n  },\n  reverse: function reverse() {\n    var newData = this.getCurrentData();\n    newData.reverse();\n    this.setCurrentData(newData);\n    return this;\n  }\n};\n\nfunction sortArray(array, orderBy) {\n  array.sort(function (a, b) {\n    var textA = a[orderBy] ? a[orderBy].toUpperCase() : \"\";\n    var textB = b[orderBy] ? b[orderBy].toUpperCase() : \"\";\n    if (textA < textB) return -1;\n    return textA > textB ? 1 : 0;\n  });\n}\n\nmodule.exports = GoogleSheetConnector;","map":null,"metadata":{},"sourceType":"script"}