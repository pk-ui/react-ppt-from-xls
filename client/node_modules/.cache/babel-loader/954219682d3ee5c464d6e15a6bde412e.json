{"ast":null,"code":"const Enums = require('../../../doc/enums');\n\nconst utils = require('../../../utils/utils');\n\nconst BaseXform = require('../base-xform');\n\nconst validation = {\n  horizontalValues: ['left', 'center', 'right', 'fill', 'centerContinuous', 'distributed', 'justify'].reduce((p, v) => {\n    p[v] = true;\n    return p;\n  }, {}),\n\n  horizontal(value) {\n    return this.horizontalValues[value] ? value : undefined;\n  },\n\n  verticalValues: ['top', 'middle', 'bottom', 'distributed', 'justify'].reduce((p, v) => {\n    p[v] = true;\n    return p;\n  }, {}),\n\n  vertical(value) {\n    if (value === 'middle') return 'center';\n    return this.verticalValues[value] ? value : undefined;\n  },\n\n  wrapText(value) {\n    return value ? true : undefined;\n  },\n\n  shrinkToFit(value) {\n    return value ? true : undefined;\n  },\n\n  textRotation(value) {\n    switch (value) {\n      case 'vertical':\n        return value;\n\n      default:\n        value = utils.validInt(value);\n        return value >= -90 && value <= 90 ? value : undefined;\n    }\n  },\n\n  indent(value) {\n    value = utils.validInt(value);\n    return Math.max(0, value);\n  },\n\n  readingOrder(value) {\n    switch (value) {\n      case 'ltr':\n        return Enums.ReadingOrder.LeftToRight;\n\n      case 'rtl':\n        return Enums.ReadingOrder.RightToLeft;\n\n      default:\n        return undefined;\n    }\n  }\n\n};\nconst textRotationXform = {\n  toXml(textRotation) {\n    textRotation = validation.textRotation(textRotation);\n\n    if (textRotation) {\n      if (textRotation === 'vertical') {\n        return 255;\n      }\n\n      const tr = Math.round(textRotation);\n\n      if (tr >= 0 && tr <= 90) {\n        return tr;\n      }\n\n      if (tr < 0 && tr >= -90) {\n        return 90 - tr;\n      }\n    }\n\n    return undefined;\n  },\n\n  toModel(textRotation) {\n    const tr = utils.validInt(textRotation);\n\n    if (tr !== undefined) {\n      if (tr === 255) {\n        return 'vertical';\n      }\n\n      if (tr >= 0 && tr <= 90) {\n        return tr;\n      }\n\n      if (tr > 90 && tr <= 180) {\n        return 90 - tr;\n      }\n    }\n\n    return undefined;\n  }\n\n}; // Alignment encapsulates translation from style.alignment model to/from xlsx\n\nclass AlignmentXform extends BaseXform {\n  get tag() {\n    return 'alignment';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.addRollback();\n    xmlStream.openNode('alignment');\n    let isValid = false;\n\n    function add(name, value) {\n      if (value) {\n        xmlStream.addAttribute(name, value);\n        isValid = true;\n      }\n    }\n\n    add('horizontal', validation.horizontal(model.horizontal));\n    add('vertical', validation.vertical(model.vertical));\n    add('wrapText', validation.wrapText(model.wrapText) ? '1' : false);\n    add('shrinkToFit', validation.shrinkToFit(model.shrinkToFit) ? '1' : false);\n    add('indent', validation.indent(model.indent));\n    add('textRotation', textRotationXform.toXml(model.textRotation));\n    add('readingOrder', validation.readingOrder(model.readingOrder));\n    xmlStream.closeNode();\n\n    if (isValid) {\n      xmlStream.commit();\n    } else {\n      xmlStream.rollback();\n    }\n  }\n\n  parseOpen(node) {\n    const model = {};\n    let valid = false;\n\n    function add(truthy, name, value) {\n      if (truthy) {\n        model[name] = value;\n        valid = true;\n      }\n    }\n\n    add(node.attributes.horizontal, 'horizontal', node.attributes.horizontal);\n    add(node.attributes.vertical, 'vertical', node.attributes.vertical === 'center' ? 'middle' : node.attributes.vertical);\n    add(node.attributes.wrapText, 'wrapText', !!node.attributes.wrapText);\n    add(node.attributes.shrinkToFit, 'shrinkToFit', !!node.attributes.shrinkToFit);\n    add(node.attributes.indent, 'indent', parseInt(node.attributes.indent, 10));\n    add(node.attributes.textRotation, 'textRotation', textRotationXform.toModel(node.attributes.textRotation));\n    add(node.attributes.readingOrder, 'readingOrder', node.attributes.readingOrder === '2' ? 'rtl' : 'ltr');\n    this.model = valid ? model : null;\n  }\n\n  parseText() {}\n\n  parseClose() {\n    return false;\n  }\n\n}\n\nmodule.exports = AlignmentXform;","map":null,"metadata":{},"sourceType":"script"}