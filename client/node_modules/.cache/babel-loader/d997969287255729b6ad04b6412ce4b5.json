{"ast":null,"code":"const XmlStream = require('../../../utils/xml-stream');\n\nconst BaseXform = require('../base-xform');\n\nconst SharedStringXform = require('./shared-string-xform');\n\nclass SharedStringsXform extends BaseXform {\n  constructor(model) {\n    super();\n    this.model = model || {\n      values: [],\n      count: 0\n    };\n    this.hash = {};\n    this.rich = {};\n  }\n\n  get sharedStringXform() {\n    return this._sharedStringXform || (this._sharedStringXform = new SharedStringXform());\n  }\n\n  get values() {\n    return this.model.values;\n  }\n\n  get uniqueCount() {\n    return this.model.values.length;\n  }\n\n  get count() {\n    return this.model.count;\n  }\n\n  getString(index) {\n    return this.model.values[index];\n  }\n\n  add(value) {\n    return value.richText ? this.addRichText(value) : this.addText(value);\n  }\n\n  addText(value) {\n    let index = this.hash[value];\n\n    if (index === undefined) {\n      index = this.hash[value] = this.model.values.length;\n      this.model.values.push(value);\n    }\n\n    this.model.count++;\n    return index;\n  }\n\n  addRichText(value) {\n    // TODO: add WeakMap here\n    const xml = this.sharedStringXform.toXml(value);\n    let index = this.rich[xml];\n\n    if (index === undefined) {\n      index = this.rich[xml] = this.model.values.length;\n      this.model.values.push(value);\n    }\n\n    this.model.count++;\n    return index;\n  } // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n  // <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"<%=totalRefs%>\" uniqueCount=\"<%=count%>\">\n  //   <si><t><%=text%></t></si>\n  //   <si><r><rPr></rPr><t></t></r></si>\n  // </sst>\n\n\n  render(xmlStream, model) {\n    model = model || this._values;\n    xmlStream.openXml(XmlStream.StdDocAttributes);\n    xmlStream.openNode('sst', {\n      xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n      count: model.count,\n      uniqueCount: model.values.length\n    });\n    const sx = this.sharedStringXform;\n    model.values.forEach(sharedString => {\n      sx.render(xmlStream, sharedString);\n    });\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'sst':\n        return true;\n\n      case 'si':\n        this.parser = this.sharedStringXform;\n        this.parser.parseOpen(node);\n        return true;\n\n      default:\n        throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.values.push(this.parser.model);\n        this.model.count++;\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    switch (name) {\n      case 'sst':\n        return false;\n\n      default:\n        throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n    }\n  }\n\n}\n\nmodule.exports = SharedStringsXform;","map":null,"metadata":{},"sourceType":"script"}