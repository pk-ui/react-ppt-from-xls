{"ast":null,"code":"(function () {\n  \"use strict\";\n  /*global extended isExtended*/\n\n  function defineObject(extended, is, arr) {\n    var deepEqual = is.deepEqual,\n        isString = is.isString,\n        isHash = is.isHash,\n        difference = arr.difference,\n        hasOwn = Object.prototype.hasOwnProperty,\n        isFunction = is.isFunction;\n\n    function _merge(target, source) {\n      var name, s;\n\n      for (name in source) {\n        if (hasOwn.call(source, name)) {\n          s = source[name];\n\n          if (!(name in target) || target[name] !== s) {\n            target[name] = s;\n          }\n        }\n      }\n\n      return target;\n    }\n\n    function _deepMerge(target, source) {\n      var name, s, t;\n\n      for (name in source) {\n        if (hasOwn.call(source, name)) {\n          s = source[name];\n          t = target[name];\n\n          if (!deepEqual(t, s)) {\n            if (isHash(t) && isHash(s)) {\n              target[name] = _deepMerge(t, s);\n            } else if (isHash(s)) {\n              target[name] = _deepMerge({}, s);\n            } else {\n              target[name] = s;\n            }\n          }\n        }\n      }\n\n      return target;\n    }\n\n    function merge(obj) {\n      if (!obj) {\n        obj = {};\n      }\n\n      for (var i = 1, l = arguments.length; i < l; i++) {\n        _merge(obj, arguments[i]);\n      }\n\n      return obj; // Object\n    }\n\n    function deepMerge(obj) {\n      if (!obj) {\n        obj = {};\n      }\n\n      for (var i = 1, l = arguments.length; i < l; i++) {\n        _deepMerge(obj, arguments[i]);\n      }\n\n      return obj; // Object\n    }\n\n    function extend(parent, child) {\n      var proto = parent.prototype || parent;\n      merge(proto, child);\n      return parent;\n    }\n\n    function forEach(hash, iterator, scope) {\n      if (!isHash(hash) || !isFunction(iterator)) {\n        throw new TypeError();\n      }\n\n      var objKeys = keys(hash),\n          key;\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        key = objKeys[i];\n        iterator.call(scope || hash, hash[key], key, hash);\n      }\n\n      return hash;\n    }\n\n    function filter(hash, iterator, scope) {\n      if (!isHash(hash) || !isFunction(iterator)) {\n        throw new TypeError();\n      }\n\n      var objKeys = keys(hash),\n          key,\n          value,\n          ret = {};\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        key = objKeys[i];\n        value = hash[key];\n\n        if (iterator.call(scope || hash, value, key, hash)) {\n          ret[key] = value;\n        }\n      }\n\n      return ret;\n    }\n\n    function values(hash) {\n      if (!isHash(hash)) {\n        throw new TypeError();\n      }\n\n      var objKeys = keys(hash),\n          ret = [];\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        ret.push(hash[objKeys[i]]);\n      }\n\n      return ret;\n    }\n\n    function keys(hash) {\n      if (!isHash(hash)) {\n        throw new TypeError();\n      }\n\n      var ret = [];\n\n      for (var i in hash) {\n        if (hasOwn.call(hash, i)) {\n          ret.push(i);\n        }\n      }\n\n      return ret;\n    }\n\n    function invert(hash) {\n      if (!isHash(hash)) {\n        throw new TypeError();\n      }\n\n      var objKeys = keys(hash),\n          key,\n          ret = {};\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        key = objKeys[i];\n        ret[hash[key]] = key;\n      }\n\n      return ret;\n    }\n\n    function toArray(hash) {\n      if (!isHash(hash)) {\n        throw new TypeError();\n      }\n\n      var objKeys = keys(hash),\n          key,\n          ret = [];\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        key = objKeys[i];\n        ret.push([key, hash[key]]);\n      }\n\n      return ret;\n    }\n\n    function omit(hash, omitted) {\n      if (!isHash(hash)) {\n        throw new TypeError();\n      }\n\n      if (isString(omitted)) {\n        omitted = [omitted];\n      }\n\n      var objKeys = difference(keys(hash), omitted),\n          key,\n          ret = {};\n\n      for (var i = 0, len = objKeys.length; i < len; ++i) {\n        key = objKeys[i];\n        ret[key] = hash[key];\n      }\n\n      return ret;\n    }\n\n    var hash = {\n      forEach: forEach,\n      filter: filter,\n      invert: invert,\n      values: values,\n      toArray: toArray,\n      keys: keys,\n      omit: omit\n    };\n    var obj = {\n      extend: extend,\n      merge: merge,\n      deepMerge: deepMerge,\n      omit: omit\n    };\n    var ret = extended.define(is.isObject, obj).define(isHash, hash).define(is.isFunction, {\n      extend: extend\n    }).expose({\n      hash: hash\n    }).expose(obj);\n    var orig = ret.extend;\n\n    ret.extend = function __extend() {\n      if (arguments.length === 1) {\n        return orig.extend.apply(ret, arguments);\n      } else {\n        extend.apply(null, arguments);\n      }\n    };\n\n    return ret;\n  }\n\n  if (\"undefined\" !== typeof exports) {\n    if (\"undefined\" !== typeof module && module.exports) {\n      module.exports = defineObject(require(\"extended\"), require(\"is-extended\"), require(\"array-extended\"));\n    }\n  } else if (\"function\" === typeof define && define.amd) {\n    define([\"extended\", \"is-extended\", \"array-extended\"], function (extended, is, array) {\n      return defineObject(extended, is, array);\n    });\n  } else {\n    this.objectExtended = defineObject(this.extended, this.isExtended, this.arrayExtended);\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}