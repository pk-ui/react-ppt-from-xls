{"ast":null,"code":"(function () {\n  \"use strict\";\n  /*global extender is, dateExtended*/\n\n  function defineExtended(extender) {\n    var merge = function merger() {\n      function _merge(target, source) {\n        var name, s;\n\n        for (name in source) {\n          if (source.hasOwnProperty(name)) {\n            s = source[name];\n\n            if (!(name in target) || target[name] !== s) {\n              target[name] = s;\n            }\n          }\n        }\n\n        return target;\n      }\n\n      return function merge(obj) {\n        if (!obj) {\n          obj = {};\n        }\n\n        for (var i = 1, l = arguments.length; i < l; i++) {\n          _merge(obj, arguments[i]);\n        }\n\n        return obj; // Object\n      };\n    }();\n\n    function getExtended() {\n      var loaded = {}; //getInitial instance;\n\n      var extended = extender.define();\n      extended.expose({\n        register: function register(alias, extendWith) {\n          if (!extendWith) {\n            extendWith = alias;\n            alias = null;\n          }\n\n          var type = typeof extendWith;\n\n          if (alias) {\n            extended[alias] = extendWith;\n          } else if (extendWith && type === \"function\") {\n            extended.extend(extendWith);\n          } else if (type === \"object\") {\n            extended.expose(extendWith);\n          } else {\n            throw new TypeError(\"extended.register must be called with an extender function\");\n          }\n\n          return extended;\n        },\n        define: function () {\n          return extender.define.apply(extender, arguments);\n        }\n      });\n      return extended;\n    }\n\n    function extended() {\n      return getExtended();\n    }\n\n    extended.define = function define() {\n      return extender.define.apply(extender, arguments);\n    };\n\n    return extended;\n  }\n\n  if (\"undefined\" !== typeof exports) {\n    if (\"undefined\" !== typeof module && module.exports) {\n      module.exports = defineExtended(require(\"extender\"));\n    }\n  } else if (\"function\" === typeof define && define.amd) {\n    define([\"extender\"], function (extender) {\n      return defineExtended(extender);\n    });\n  } else {\n    this.extended = defineExtended(this.extender);\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}