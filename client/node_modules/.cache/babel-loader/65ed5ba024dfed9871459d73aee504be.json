{"ast":null,"code":"// StringBuf - a way to keep string memory operations to a minimum\n// while building the strings for the xml files\nclass StringBuf {\n  constructor(options) {\n    this._buf = Buffer.alloc(options && options.size || 16384);\n    this._encoding = options && options.encoding || 'utf8'; // where in the buffer we are at\n\n    this._inPos = 0; // for use by toBuffer()\n\n    this._buffer = undefined;\n  }\n\n  get length() {\n    return this._inPos;\n  }\n\n  get capacity() {\n    return this._buf.length;\n  }\n\n  get buffer() {\n    return this._buf;\n  }\n\n  toBuffer() {\n    // return the current data as a single enclosing buffer\n    if (!this._buffer) {\n      this._buffer = Buffer.alloc(this.length);\n\n      this._buf.copy(this._buffer, 0, 0, this.length);\n    }\n\n    return this._buffer;\n  }\n\n  reset(position) {\n    position = position || 0;\n    this._buffer = undefined;\n    this._inPos = position;\n  }\n\n  _grow(min) {\n    let size = this._buf.length * 2;\n\n    while (size < min) {\n      size *= 2;\n    }\n\n    const buf = Buffer.alloc(size);\n\n    this._buf.copy(buf, 0);\n\n    this._buf = buf;\n  }\n\n  addText(text) {\n    this._buffer = undefined;\n\n    let inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding); // if we've hit (or nearing capacity), grow the buf\n\n\n    while (inPos >= this._buf.length - 4) {\n      this._grow(this._inPos + text.length); // keep trying to write until we've completely written the text\n\n\n      inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\n    }\n\n    this._inPos = inPos;\n  }\n\n  addStringBuf(inBuf) {\n    if (inBuf.length) {\n      this._buffer = undefined;\n\n      if (this.length + inBuf.length > this.capacity) {\n        this._grow(this.length + inBuf.length);\n      } // eslint-disable-next-line no-underscore-dangle\n\n\n      inBuf._buf.copy(this._buf, this._inPos, 0, inBuf.length);\n\n      this._inPos += inBuf.length;\n    }\n  }\n\n}\n\nmodule.exports = StringBuf;","map":null,"metadata":{},"sourceType":"script"}