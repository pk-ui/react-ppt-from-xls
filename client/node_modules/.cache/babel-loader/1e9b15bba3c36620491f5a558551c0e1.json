{"ast":null,"code":"const colCache = require('../utils/col-cache');\n\nconst Anchor = require('./anchor');\n\nclass Image {\n  constructor(worksheet, model) {\n    this.worksheet = worksheet;\n    this.model = model;\n  }\n\n  get model() {\n    switch (this.type) {\n      case 'background':\n        return {\n          type: this.type,\n          imageId: this.imageId\n        };\n\n      case 'image':\n        return {\n          type: this.type,\n          imageId: this.imageId,\n          range: {\n            tl: this.range.tl.model,\n            br: this.range.br && this.range.br.model,\n            ext: this.range.ext\n          }\n        };\n\n      default:\n        throw new Error('Invalid Image Type');\n    }\n  }\n\n  set model({\n    type,\n    imageId,\n    range\n  }) {\n    this.type = type;\n    this.imageId = imageId;\n\n    if (type === 'image') {\n      if (typeof range === 'string') {\n        const decoded = colCache.decode(range);\n        this.range = {\n          tl: new Anchor(this.worksheet, {\n            col: decoded.left,\n            row: decoded.top\n          }, -1),\n          br: new Anchor(this.worksheet, {\n            col: decoded.right,\n            row: decoded.bottom\n          }, 0),\n          editAs: 'oneCell'\n        };\n      } else {\n        this.range = {\n          tl: new Anchor(this.worksheet, range.tl, 0),\n          br: range.br && new Anchor(this.worksheet, range.br, 0),\n          ext: range.ext,\n          editAs: range.editAs\n        };\n      }\n    }\n  }\n\n}\n\nmodule.exports = Image;","map":null,"metadata":{},"sourceType":"script"}