{"ast":null,"code":"'use strict';\n\nconst colCache = require('../utils/col-cache');\n\nconst _ = require('../utils/under-dash');\n\nconst Enums = require('./enums');\n\nconst _require = require('../utils/shared-formula'),\n      slideFormula = _require.slideFormula;\n\nconst Note = require('./note'); // Cell requirements\n//  Operate inside a worksheet\n//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.\n//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.\n\n\nclass Cell {\n  constructor(row, column, address) {\n    if (!row || !column) {\n      throw new Error('A Cell needs a Row');\n    }\n\n    this._row = row;\n    this._column = column;\n    colCache.validateAddress(address);\n    this._address = address; // TODO: lazy evaluation of this._value\n\n    this._value = Value.create(Cell.Types.Null, this);\n    this.style = this._mergeStyle(row.style, column.style, {});\n    this._mergeCount = 0;\n  }\n\n  get worksheet() {\n    return this._row.worksheet;\n  }\n\n  get workbook() {\n    return this._row.worksheet.workbook;\n  } // help GC by removing cyclic (and other) references\n\n\n  destroy() {\n    delete this.style;\n    delete this._value;\n    delete this._row;\n    delete this._column;\n    delete this._address;\n  } // =========================================================================\n  // Styles stuff\n\n\n  get numFmt() {\n    return this.style.numFmt;\n  }\n\n  set numFmt(value) {\n    this.style.numFmt = value;\n  }\n\n  get font() {\n    return this.style.font;\n  }\n\n  set font(value) {\n    this.style.font = value;\n  }\n\n  get alignment() {\n    return this.style.alignment;\n  }\n\n  set alignment(value) {\n    this.style.alignment = value;\n  }\n\n  get border() {\n    return this.style.border;\n  }\n\n  set border(value) {\n    this.style.border = value;\n  }\n\n  get fill() {\n    return this.style.fill;\n  }\n\n  set fill(value) {\n    this.style.fill = value;\n  }\n\n  _mergeStyle(rowStyle, colStyle, style) {\n    const numFmt = rowStyle && rowStyle.numFmt || colStyle && colStyle.numFmt;\n    if (numFmt) style.numFmt = numFmt;\n    const font = rowStyle && rowStyle.font || colStyle && colStyle.font;\n    if (font) style.font = font;\n    const alignment = rowStyle && rowStyle.alignment || colStyle && colStyle.alignment;\n    if (alignment) style.alignment = alignment;\n    const border = rowStyle && rowStyle.border || colStyle && colStyle.border;\n    if (border) style.border = border;\n    const fill = rowStyle && rowStyle.fill || colStyle && colStyle.fill;\n    if (fill) style.fill = fill;\n    return style;\n  } // =========================================================================\n  // return the address for this cell\n\n\n  get address() {\n    return this._address;\n  }\n\n  get row() {\n    return this._row.number;\n  }\n\n  get col() {\n    return this._column.number;\n  }\n\n  get $col$row() {\n    return \"$\".concat(this._column.letter, \"$\").concat(this.row);\n  } // =========================================================================\n  // Value stuff\n\n\n  get type() {\n    return this._value.type;\n  }\n\n  get effectiveType() {\n    return this._value.effectiveType;\n  }\n\n  toCsvString() {\n    return this._value.toCsvString();\n  } // =========================================================================\n  // Merge stuff\n\n\n  addMergeRef() {\n    this._mergeCount++;\n  }\n\n  releaseMergeRef() {\n    this._mergeCount--;\n  }\n\n  get isMerged() {\n    return this._mergeCount > 0 || this.type === Cell.Types.Merge;\n  }\n\n  merge(master) {\n    this._value.release();\n\n    this._value = Value.create(Cell.Types.Merge, this, master);\n    this.style = master.style;\n  }\n\n  unmerge() {\n    if (this.type === Cell.Types.Merge) {\n      this._value.release();\n\n      this._value = Value.create(Cell.Types.Null, this);\n      this.style = this._mergeStyle(this._row.style, this._column.style, {});\n    }\n  }\n\n  isMergedTo(master) {\n    if (this._value.type !== Cell.Types.Merge) return false;\n    return this._value.isMergedTo(master);\n  }\n\n  get master() {\n    if (this.type === Cell.Types.Merge) {\n      return this._value.master;\n    }\n\n    return this; // an unmerged cell is its own master\n  }\n\n  get isHyperlink() {\n    return this._value.type === Cell.Types.Hyperlink;\n  }\n\n  get hyperlink() {\n    return this._value.hyperlink;\n  } // return the value\n\n\n  get value() {\n    return this._value.value;\n  } // set the value - can be number, string or raw\n\n\n  set value(v) {\n    // special case - merge cells set their master's value\n    if (this.type === Cell.Types.Merge) {\n      this._value.master.value = v;\n      return;\n    }\n\n    this._value.release(); // assign value\n\n\n    this._value = Value.create(Value.getType(v), this, v);\n  }\n\n  get note() {\n    return this._comment && this._comment.note;\n  }\n\n  set note(note) {\n    this._comment = new Note(note);\n  }\n\n  get text() {\n    return this._value.toString();\n  }\n\n  get html() {\n    return _.escapeHtml(this.text);\n  }\n\n  toString() {\n    return this.text;\n  }\n\n  _upgradeToHyperlink(hyperlink) {\n    // if this cell is a string, turn it into a Hyperlink\n    if (this.type === Cell.Types.String) {\n      this._value = Value.create(Cell.Types.Hyperlink, this, {\n        text: this._value.value,\n        hyperlink\n      });\n    }\n  } // =========================================================================\n  // Formula stuff\n\n\n  get formula() {\n    return this._value.formula;\n  }\n\n  get result() {\n    return this._value.result;\n  }\n\n  get formulaType() {\n    return this._value.formulaType;\n  } // =========================================================================\n  // Name stuff\n\n\n  get fullAddress() {\n    const worksheet = this._row.worksheet;\n    return {\n      sheetName: worksheet.name,\n      address: this.address,\n      row: this.row,\n      col: this.col\n    };\n  }\n\n  get name() {\n    return this.names[0];\n  }\n\n  set name(value) {\n    this.names = [value];\n  }\n\n  get names() {\n    return this.workbook.definedNames.getNamesEx(this.fullAddress);\n  }\n\n  set names(value) {\n    const definedNames = this.workbook.definedNames;\n    definedNames.removeAllNames(this.fullAddress);\n    value.forEach(name => {\n      definedNames.addEx(this.fullAddress, name);\n    });\n  }\n\n  addName(name) {\n    this.workbook.definedNames.addEx(this.fullAddress, name);\n  }\n\n  removeName(name) {\n    this.workbook.definedNames.removeEx(this.fullAddress, name);\n  }\n\n  removeAllNames() {\n    this.workbook.definedNames.removeAllNames(this.fullAddress);\n  } // =========================================================================\n  // Data Validation stuff\n\n\n  get _dataValidations() {\n    return this.worksheet.dataValidations;\n  }\n\n  get dataValidation() {\n    return this._dataValidations.find(this.address);\n  }\n\n  set dataValidation(value) {\n    this._dataValidations.add(this.address, value);\n  } // =========================================================================\n  // Model stuff\n\n\n  get model() {\n    const model = this._value.model;\n    model.style = this.style;\n\n    if (this._comment) {\n      model.comment = this._comment.model;\n    }\n\n    return model;\n  }\n\n  set model(value) {\n    this._value.release();\n\n    this._value = Value.create(value.type, this);\n    this._value.model = value;\n\n    if (value.comment) {\n      switch (value.comment.type) {\n        case 'note':\n          this._comment = new Note(value.comment.note);\n          break;\n      }\n    }\n\n    if (value.style) {\n      this.style = value.style;\n    } else {\n      this.style = {};\n    }\n  }\n\n}\n\nCell.Types = Enums.ValueType; // =============================================================================\n// Internal Value Types\n\nclass NullValue {\n  constructor(cell) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Null\n    };\n  }\n\n  get value() {\n    return null;\n  }\n\n  set value(value) {// nothing to do\n  }\n\n  get type() {\n    return Cell.Types.Null;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Null;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return '';\n  }\n\n  release() {}\n\n  toString() {\n    return '';\n  }\n\n}\n\nclass NumberValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Number,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Number;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Number;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toString();\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value.toString();\n  }\n\n}\n\nclass StringValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.String;\n  }\n\n  get effectiveType() {\n    return Cell.Types.String;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return \"\\\"\".concat(this.model.value.replace(/\"/g, '\"\"'), \"\\\"\");\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value;\n  }\n\n}\n\nclass RichTextValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  toString() {\n    return this.model.value.richText.map(t => t.text).join('');\n  }\n\n  get type() {\n    return Cell.Types.RichText;\n  }\n\n  get effectiveType() {\n    return Cell.Types.RichText;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return \"\\\"\".concat(this.text.replace(/\"/g, '\"\"'), \"\\\"\");\n  }\n\n  release() {}\n\n}\n\nclass DateValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Date,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Date;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Date;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toISOString();\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value.toString();\n  }\n\n}\n\nclass HyperlinkValue {\n  constructor(cell, value) {\n    this.model = Object.assign({\n      address: cell.address,\n      type: Cell.Types.Hyperlink,\n      text: value ? value.text : undefined,\n      hyperlink: value ? value.hyperlink : undefined\n    }, value && value.tooltip ? {\n      tooltip: value.tooltip\n    } : {});\n  }\n\n  get value() {\n    return Object.assign({\n      text: this.model.text,\n      hyperlink: this.model.hyperlink\n    }, this.model.tooltip ? {\n      tooltip: this.model.tooltip\n    } : {});\n  }\n\n  set value(value) {\n    this.model = Object.assign({\n      text: value.text,\n      hyperlink: value.hyperlink\n    }, value && value.tooltip ? {\n      tooltip: value.tooltip\n    } : {});\n  }\n\n  get text() {\n    return this.model.text;\n  }\n\n  set text(value) {\n    this.model.text = value;\n  }\n  /*\n  get tooltip() {\n    return this.model.tooltip;\n  }\n   set tooltip(value) {\n    this.model.tooltip = value;\n  } */\n\n\n  get hyperlink() {\n    return this.model.hyperlink;\n  }\n\n  set hyperlink(value) {\n    this.model.hyperlink = value;\n  }\n\n  get type() {\n    return Cell.Types.Hyperlink;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Hyperlink;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.hyperlink;\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.text;\n  }\n\n}\n\nclass MergeValue {\n  constructor(cell, master) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Merge,\n      master: master ? master.address : undefined\n    };\n    this._master = master;\n\n    if (master) {\n      master.addMergeRef();\n    }\n  }\n\n  get value() {\n    return this._master.value;\n  }\n\n  set value(value) {\n    if (value instanceof Cell) {\n      if (this._master) {\n        this._master.releaseMergeRef();\n      }\n\n      value.addMergeRef();\n      this._master = value;\n    } else {\n      this._master.value = value;\n    }\n  }\n\n  isMergedTo(master) {\n    return master === this._master;\n  }\n\n  get master() {\n    return this._master;\n  }\n\n  get type() {\n    return Cell.Types.Merge;\n  }\n\n  get effectiveType() {\n    return this._master.effectiveType;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return '';\n  }\n\n  release() {\n    this._master.releaseMergeRef();\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n}\n\nclass FormulaValue {\n  constructor(cell, value) {\n    this.cell = cell;\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Formula,\n      formula: value ? value.formula : undefined,\n      sharedFormula: value ? value.sharedFormula : undefined,\n      result: value ? value.result : undefined\n    };\n  }\n\n  get value() {\n    return this.model.formula ? {\n      formula: this.model.formula,\n      result: this.model.result\n    } : {\n      sharedFormula: this.model.sharedFormula,\n      result: this.model.result\n    };\n  }\n\n  set value(value) {\n    this.model.formula = value.formula;\n    this.model.sharedFormula = value.sharedFormula;\n    this.model.result = value.result;\n  }\n\n  validate(value) {\n    switch (Value.getType(value)) {\n      case Cell.Types.Null:\n      case Cell.Types.String:\n      case Cell.Types.Number:\n      case Cell.Types.Date:\n        break;\n\n      case Cell.Types.Hyperlink:\n      case Cell.Types.Formula:\n      default:\n        throw new Error('Cannot process that type of result value');\n    }\n  }\n\n  get dependencies() {\n    // find all the ranges and cells mentioned in the formula\n    const ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g);\n    const cells = this.formula.replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g, '').match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}/g);\n    return {\n      ranges,\n      cells\n    };\n  }\n\n  get formula() {\n    return this.model.formula || this._getTranslatedFormula();\n  }\n\n  set formula(value) {\n    this.model.formula = value;\n  }\n\n  get formulaType() {\n    if (this.model.formula) {\n      return Enums.FormulaType.Master;\n    }\n\n    if (this.model.sharedFormula) {\n      return Enums.FormulaType.Shared;\n    }\n\n    return Enums.FormulaType.None;\n  }\n\n  get result() {\n    return this.model.result;\n  }\n\n  set result(value) {\n    this.model.result = value;\n  }\n\n  get type() {\n    return Cell.Types.Formula;\n  }\n\n  get effectiveType() {\n    const v = this.model.result;\n\n    if (v === null || v === undefined) {\n      return Enums.ValueType.Null;\n    }\n\n    if (v instanceof String || typeof v === 'string') {\n      return Enums.ValueType.String;\n    }\n\n    if (typeof v === 'number') {\n      return Enums.ValueType.Number;\n    }\n\n    if (v instanceof Date) {\n      return Enums.ValueType.Date;\n    }\n\n    if (v.text && v.hyperlink) {\n      return Enums.ValueType.Hyperlink;\n    }\n\n    if (v.formula) {\n      return Enums.ValueType.Formula;\n    }\n\n    return Enums.ValueType.Null;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  _getTranslatedFormula() {\n    if (!this._translatedFormula && this.model.sharedFormula) {\n      const worksheet = this.cell.worksheet;\n      const master = worksheet.findCell(this.model.sharedFormula);\n      this._translatedFormula = master && slideFormula(master.formula, master.address, this.model.address);\n    }\n\n    return this._translatedFormula;\n  }\n\n  toCsvString() {\n    return \"\".concat(this.model.result || '');\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.result ? this.model.result.toString() : '';\n  }\n\n}\n\nclass SharedStringValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.SharedString,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.SharedString;\n  }\n\n  get effectiveType() {\n    return Cell.Types.SharedString;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value.toString();\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value.toString();\n  }\n\n}\n\nclass BooleanValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Boolean,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Boolean;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Boolean;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value ? 1 : 0;\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value.toString();\n  }\n\n}\n\nclass ErrorValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.Error,\n      value\n    };\n  }\n\n  get value() {\n    return this.model.value;\n  }\n\n  set value(value) {\n    this.model.value = value;\n  }\n\n  get type() {\n    return Cell.Types.Error;\n  }\n\n  get effectiveType() {\n    return Cell.Types.Error;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.toString();\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value.error.toString();\n  }\n\n}\n\nclass JSONValue {\n  constructor(cell, value) {\n    this.model = {\n      address: cell.address,\n      type: Cell.Types.String,\n      value: JSON.stringify(value),\n      rawValue: value\n    };\n  }\n\n  get value() {\n    return this.model.rawValue;\n  }\n\n  set value(value) {\n    this.model.rawValue = value;\n    this.model.value = JSON.stringify(value);\n  }\n\n  get type() {\n    return Cell.Types.String;\n  }\n\n  get effectiveType() {\n    return Cell.Types.String;\n  }\n\n  get address() {\n    return this.model.address;\n  }\n\n  set address(value) {\n    this.model.address = value;\n  }\n\n  toCsvString() {\n    return this.model.value;\n  }\n\n  release() {}\n\n  toString() {\n    return this.model.value;\n  }\n\n} // Value is a place to hold common static Value type functions\n\n\nconst Value = {\n  getType(value) {\n    if (value === null || value === undefined) {\n      return Cell.Types.Null;\n    }\n\n    if (value instanceof String || typeof value === 'string') {\n      return Cell.Types.String;\n    }\n\n    if (typeof value === 'number') {\n      return Cell.Types.Number;\n    }\n\n    if (typeof value === 'boolean') {\n      return Cell.Types.Boolean;\n    }\n\n    if (value instanceof Date) {\n      return Cell.Types.Date;\n    }\n\n    if (value.text && value.hyperlink) {\n      return Cell.Types.Hyperlink;\n    }\n\n    if (value.formula || value.sharedFormula) {\n      return Cell.Types.Formula;\n    }\n\n    if (value.richText) {\n      return Cell.Types.RichText;\n    }\n\n    if (value.sharedString) {\n      return Cell.Types.SharedString;\n    }\n\n    if (value.error) {\n      return Cell.Types.Error;\n    }\n\n    return Cell.Types.JSON;\n  },\n\n  // map valueType to constructor\n  types: [{\n    t: Cell.Types.Null,\n    f: NullValue\n  }, {\n    t: Cell.Types.Number,\n    f: NumberValue\n  }, {\n    t: Cell.Types.String,\n    f: StringValue\n  }, {\n    t: Cell.Types.Date,\n    f: DateValue\n  }, {\n    t: Cell.Types.Hyperlink,\n    f: HyperlinkValue\n  }, {\n    t: Cell.Types.Formula,\n    f: FormulaValue\n  }, {\n    t: Cell.Types.Merge,\n    f: MergeValue\n  }, {\n    t: Cell.Types.JSON,\n    f: JSONValue\n  }, {\n    t: Cell.Types.SharedString,\n    f: SharedStringValue\n  }, {\n    t: Cell.Types.RichText,\n    f: RichTextValue\n  }, {\n    t: Cell.Types.Boolean,\n    f: BooleanValue\n  }, {\n    t: Cell.Types.Error,\n    f: ErrorValue\n  }].reduce((p, t) => {\n    p[t.t] = t.f;\n    return p;\n  }, []),\n\n  create(type, cell, value) {\n    const T = this.types[type];\n\n    if (!T) {\n      throw new Error(\"Could not create Value of type \".concat(type));\n    }\n\n    return new T(cell, value);\n  }\n\n};\nmodule.exports = Cell;","map":null,"metadata":{},"sourceType":"script"}