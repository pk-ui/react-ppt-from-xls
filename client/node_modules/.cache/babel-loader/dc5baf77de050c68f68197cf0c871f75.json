{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nconst FilterColumnXform = require('./filter-column-xform');\n\nclass AutoFilterXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      filterColumn: new FilterColumnXform()\n    };\n  }\n\n  get tag() {\n    return 'autoFilter';\n  }\n\n  prepare(model) {\n    model.columns.forEach((column, index) => {\n      this.map.filterColumn.prepare(column, {\n        index\n      });\n    });\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      ref: model.autoFilterRef\n    });\n    model.columns.forEach(column => {\n      this.map.filterColumn.render(xmlStream, column);\n    });\n    xmlStream.closeNode();\n    return true;\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        this.model = {\n          autoFilterRef: node.attributes.ref,\n          columns: []\n        };\n        return true;\n\n      default:\n        this.parser = this.map[node.name];\n\n        if (this.parser) {\n          this.parseOpen(node);\n          return true;\n        }\n\n        throw new Error(\"Unexpected xml node in parseOpen: \".concat(JSON.stringify(node)));\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.columns.push(this.parser.model);\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    switch (name) {\n      case this.tag:\n        return false;\n\n      default:\n        throw new Error(\"Unexpected xml node in parseClose: \".concat(name));\n    }\n  }\n\n}\n\nmodule.exports = AutoFilterXform;","map":null,"metadata":{},"sourceType":"script"}