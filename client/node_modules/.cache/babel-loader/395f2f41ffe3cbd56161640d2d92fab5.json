{"ast":null,"code":"var _jsxFileName = \"/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/pptGen.js\";\nimport React from 'react';\nimport bgImage from './images/bg-image.png';\nimport retained from './images/retained.png';\nimport sold from './images/sold.png'; //import preOwned from './images/preOwned.png';\n\nimport readXlsxFile from 'read-excel-file';\n\nvar PptxGenJS = require(\"pptxgenjs\");\n\nvar pptx;\n\nfunction PPTGen() {\n  var xcelData = [];\n\n  const uploadXLSXFile = () => {\n    const input = document.getElementById('input');\n    input.addEventListener('change', () => {\n      readXlsxFile(input.files[0]).then(rows => {\n        rows.forEach(function (value) {\n          let playerInfo = {};\n\n          if (playerInfo.playerId !== null) {\n            playerInfo.playerId = value[0];\n            playerInfo.playerName = value[1];\n            playerInfo.teamName = value[4];\n            playerInfo.matches = value[5];\n            playerInfo.runs = value[6];\n            playerInfo.ballsFaced = value[7];\n            playerInfo.strikeRate = isNumber(value[8]);\n            playerInfo.wickets = value[9];\n            playerInfo.playingRole = playerInfo.wickets ? 'All Rounder' : 'Batting';\n            playerInfo.economy = isNumber(value[10]);\n            playerInfo.bowlOvers = value[11];\n            playerInfo.battingAverage = isNumber(value[12]);\n            playerInfo.highestScore = value[13];\n            playerInfo.bestBowling = ExcelDateToJSDate(value[14]);\n            playerInfo.hatTricks = value[15];\n            playerInfo.catches = value[16];\n            playerInfo.totalPoints = value[17];\n            playerInfo.batPoints = value[18];\n            playerInfo.bowlPoints = value[19];\n            playerInfo.fieldingPoints = value[20];\n            playerInfo.isExternalPlayer = value[21];\n            playerInfo.isRetainedPlayer = value[22];\n            playerInfo.isOwnerPlayer = value[23];\n            playerInfo.overallRank = value[24];\n            playerInfo.batRank = value[25];\n            playerInfo.bowlRank = value[26];\n            xcelData.push(playerInfo);\n          }\n        });\n      });\n    });\n  };\n\n  const ExcelDateToJSDate = date => {\n    if (date === 0) return \"-\";\n    var d = new Date(Math.round((date - 25568) * 86400 * 1000));\n    return d.getMonth() + 1 + \"/\" + d.getDate();\n  };\n\n  const isNumber = value => {\n    if (isNaN(value)) {\n      return value;\n    }\n\n    return parseFloat(value).toFixed(2);\n  };\n\n  const getBasePrice = (playerRank, price40K, price30K, price20K, price10K) => {\n    let basePrice = \"\";\n\n    if (playerRank >= price10K) {\n      basePrice = \"$ 10,000 /-\";\n    } else if (playerRank >= price20K) {\n      basePrice = \"$ 20,000 /-\";\n    } else if (playerRank >= price30K) {\n      basePrice = \"$ 30,000 /-\";\n    } else if (playerRank >= price40K) {\n      basePrice = \"$ 40,000 /-\";\n    } else {\n      basePrice = \"$ 50,000 /-\";\n    }\n\n    return basePrice;\n  };\n\n  const generatePPT = () => {\n    var playersCount = xcelData.length;\n    var price50K = 1;\n    var price40K = price50K + Math.ceil((playersCount - 1) * 10 / 100);\n    var price30K = price40K + Math.ceil((playersCount - 1) * 15 / 100);\n    var price20K = price30K + Math.ceil((playersCount - 1) * 20 / 100);\n    var price10K = price20K + Math.ceil((playersCount - 1) * 25 / 100);\n    console.log('50K : ' + price50K + ' ;40K : ' + price40K + ' ;30K : ' + price30K + ' ;20K : ' + price20K + ' ;10K : ' + price10K);\n    pptx = new PptxGenJS();\n\n    for (let i = 0; i < playersCount; i++) {\n      let playerInfo = xcelData[i];\n\n      if (playerInfo.playerId !== 'player_id') {\n        var slide = pptx.addNewSlide();\n        var centerAlignOpts = {\n          x: 1.0,\n          y: 0.2,\n          fontSize: 40,\n          color: '000000',\n          h: 1.4,\n          align: 'center',\n          bold: true\n        };\n        var playerRankOpts = {\n          x: 4.0,\n          y: 1.8,\n          fontSize: 16,\n          color: 'FFFF00',\n          bold: true\n        };\n        var playerBasePriceOpts = {\n          x: 6.7,\n          y: 0.3,\n          fontSize: 20,\n          color: '000000',\n          bold: true,\n          w: 3.3,\n          fill: 'FFFF00'\n        };\n        var playerIdOpts = {\n          x: 4.0,\n          y: 2.1,\n          fontSize: 16,\n          color: 'FFFF00',\n          bold: true\n        };\n        var teamNameOpts = {\n          x: 4.0,\n          y: 2.4,\n          fontSize: 16,\n          color: 'FFFF00',\n          bold: true\n        };\n        var playingRoleOpts = {\n          x: 4.0,\n          y: 2.7,\n          fontSize: 16,\n          color: 'FFFF00',\n          bold: true\n        };\n        let matchesX = 1.7;\n        let runsX = 3.4;\n        let wicketsX = 5.1;\n\n        if (playerInfo.wickets) {\n          matchesX = 0.1;\n          runsX = 0.7;\n          wicketsX = 5.5;\n        } else {\n          matchesX = 2.4;\n          runsX = 3.7;\n        }\n\n        slide.addImage({\n          path: bgImage,\n          x: 0,\n          y: 0,\n          w: 10,\n          h: 5.60\n        });\n\n        if (playerInfo.isRetainedPlayer) {\n          slide.addImage({\n            path: retained,\n            x: 1,\n            y: 2.0,\n            w: 2.2,\n            h: 1\n          });\n        }\n\n        if (playerInfo.isOwnerPlayer) {\n          slide.addImage({\n            path: sold,\n            x: 1.2,\n            y: 2.0,\n            w: 2,\n            h: 1\n          });\n        }\n\n        if (playerInfo.isExternalPlayer) {\n          // External Player\n          slide.addText('Associated with Other MN Cricket League(s)', {\n            x: 0,\n            y: 0,\n            fontSize: 10,\n            color: 'C0C0C0',\n            h: 0.3,\n            w: 10,\n            align: 'center',\n            bold: true,\n            fill: 'B22222'\n          });\n          slide.addText('Associated with Other MN Cricket League(s)', {\n            x: 0,\n            y: 5.33,\n            fontSize: 10,\n            color: 'C0C0C0',\n            h: 0.3,\n            w: 10,\n            align: 'center',\n            bold: true,\n            fill: 'B22222'\n          });\n        } // Player Name\n\n\n        slide.addText(playerInfo.playerName, centerAlignOpts); // Overall Rank\n\n        slide.addText('Base Price: ' + getBasePrice(playerInfo.overallRank, price40K, price30K, price20K, price10K), playerBasePriceOpts); // Overall Rank\n\n        slide.addText('Overall Rank: ' + playerInfo.overallRank, playerRankOpts); // Player ID\n\n        slide.addText('Player ID: ' + playerInfo.playerId, playerIdOpts); // Team Name\n\n        slide.addText('Team Name: ' + playerInfo.teamName, teamNameOpts); // Playing Role\n\n        slide.addText('Playing Role: ' + playerInfo.playingRole, playingRoleOpts); // Batting Stats\n\n        slide.addText('Batting Stats', {\n          x: runsX,\n          y: 3.5,\n          w: 4.6,\n          fontSize: 16,\n          fill: 'FF8C00',\n          color: '000000',\n          bold: true\n        }); // Batting Style\n        //slide.addText('Batting Role: ' + playerInfo.battingRole, battingRoleOpts);\n        // Bowling Style\n        //slide.addText('Bowling Role: ' + playerInfo.bowlingRole, bowlingRoleOpts);\n\n        let tableHeaderOptions = {\n          valign: 't',\n          align: 'c',\n          fontFace: 'Arial',\n          border: {\n            pt: 0\n          }\n        };\n        let tableRowOptions = {\n          valign: 't',\n          align: 'c',\n          fontFace: 'Arial',\n          border: {\n            pt: 0\n          }\n        }; // Matches\n\n        var matchRows = [[{\n          text: '(M)',\n          options: tableHeaderOptions\n        }]];\n        let dynamicMatchRows = [{\n          text: playerInfo.matches,\n          options: tableRowOptions\n        }];\n        matchRows.push(dynamicMatchRows);\n        var matchesTabOpts = {\n          x: matchesX,\n          y: 3.8,\n          w: 0.5,\n          rowH: 0.6,\n          fill: '5A81E0',\n          fontSize: 16,\n          color: 'FFFFFF',\n          valign: 'm',\n          bold: true\n        };\n        slide.addTable(matchRows, matchesTabOpts); // Runs\n\n        var runsRows = [[{\n          text: 'Rank',\n          options: tableHeaderOptions\n        }, {\n          text: 'Runs',\n          options: tableHeaderOptions\n        }, {\n          text: 'S/R',\n          options: tableHeaderOptions\n        }, {\n          text: 'HS',\n          options: tableHeaderOptions\n        }, {\n          text: 'Ave',\n          options: tableHeaderOptions\n        }, {\n          text: '(C)',\n          options: tableHeaderOptions\n        }]];\n        var dynamicRunsRows = [{\n          text: playerInfo.batRank,\n          options: tableRowOptions\n        }, {\n          text: playerInfo.runs,\n          options: tableRowOptions\n        }, {\n          text: playerInfo.strikeRate,\n          options: tableRowOptions\n        }, {\n          text: playerInfo.highestScore,\n          options: tableRowOptions\n        }, {\n          text: playerInfo.battingAverage,\n          options: tableRowOptions\n        }, {\n          text: playerInfo.catches,\n          options: tableRowOptions\n        }];\n        runsRows.push(dynamicRunsRows); //runsRows.push([{ text: 'S/R : ' + playerInfo.strikeRate, options: tableRowOptions }]);\n\n        var runsTabOpts = {\n          x: runsX,\n          y: 3.8,\n          w: 4.6,\n          rowH: 0.6,\n          fill: '5A81E0',\n          fontSize: 16,\n          color: 'FFFFFF',\n          valign: 'm',\n          bold: true\n        };\n        slide.addTable(runsRows, runsTabOpts);\n\n        if (playerInfo.playingRole !== 'Batting') {\n          // Batting Stats\n          slide.addText('Bowling Stats', {\n            x: wicketsX,\n            y: 3.5,\n            w: 4.3,\n            fontSize: 16,\n            fill: 'FF8C00',\n            color: '000000',\n            bold: true\n          }); // Wickets\n\n          var wicketsRows = [[{\n            text: 'Rank',\n            options: tableHeaderOptions\n          }, {\n            text: '(W)',\n            options: tableHeaderOptions\n          }, {\n            text: '(O)',\n            options: tableHeaderOptions\n          }, {\n            text: 'Econ',\n            options: tableHeaderOptions\n          }, {\n            text: 'BB',\n            options: tableHeaderOptions\n          }, {\n            text: 'H/T',\n            options: tableHeaderOptions\n          }]];\n          let dynamicWicketsRows = [{\n            text: playerInfo.bowlRank,\n            options: tableRowOptions\n          }, {\n            text: playerInfo.wickets,\n            options: tableRowOptions\n          }, {\n            text: playerInfo.bowlOvers,\n            options: tableRowOptions\n          }, {\n            text: playerInfo.economy,\n            options: tableRowOptions\n          }, {\n            text: playerInfo.bestBowling,\n            options: tableRowOptions\n          }, {\n            text: playerInfo.hatTricks,\n            options: tableRowOptions\n          }];\n          wicketsRows.push(dynamicWicketsRows);\n          var wicketsTabOpts = {\n            x: wicketsX,\n            y: 3.8,\n            w: 4.3,\n            rowH: 0.6,\n            fill: '5A81E0',\n            fontSize: 16,\n            color: 'FFFFFF',\n            valign: 'm',\n            bold: true\n          };\n          slide.addTable(wicketsRows, wicketsTabOpts);\n        }\n      }\n    }\n\n    pptx.save();\n    console.log('Complete');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, \"MTPL Players Slide Generator\"))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    id: \"input\",\n    onClick: uploadXLSXFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, React.createElement(\"center\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: generatePPT,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"Generate MTPL Slides\"))))));\n}\n\n;\nexport default PPTGen;","map":{"version":3,"sources":["/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/pptGen.js"],"names":["React","bgImage","retained","sold","readXlsxFile","PptxGenJS","require","pptx","PPTGen","xcelData","uploadXLSXFile","input","document","getElementById","addEventListener","files","then","rows","forEach","value","playerInfo","playerId","playerName","teamName","matches","runs","ballsFaced","strikeRate","isNumber","wickets","playingRole","economy","bowlOvers","battingAverage","highestScore","bestBowling","ExcelDateToJSDate","hatTricks","catches","totalPoints","batPoints","bowlPoints","fieldingPoints","isExternalPlayer","isRetainedPlayer","isOwnerPlayer","overallRank","batRank","bowlRank","push","date","d","Date","Math","round","getMonth","getDate","isNaN","parseFloat","toFixed","getBasePrice","playerRank","price40K","price30K","price20K","price10K","basePrice","generatePPT","playersCount","length","price50K","ceil","console","log","i","slide","addNewSlide","centerAlignOpts","x","y","fontSize","color","h","align","bold","playerRankOpts","playerBasePriceOpts","w","fill","playerIdOpts","teamNameOpts","playingRoleOpts","matchesX","runsX","wicketsX","addImage","path","addText","tableHeaderOptions","valign","fontFace","border","pt","tableRowOptions","matchRows","text","options","dynamicMatchRows","matchesTabOpts","rowH","addTable","runsRows","dynamicRunsRows","runsTabOpts","wicketsRows","dynamicWicketsRows","wicketsTabOpts","save"],"mappings":"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","sourcesContent":["import React from 'react';\nimport bgImage from './images/bg-image.png';\nimport retained from './images/retained.png';\nimport sold from './images/sold.png';\n//import preOwned from './images/preOwned.png';\nimport readXlsxFile from 'read-excel-file'\n\nvar PptxGenJS = require(\"pptxgenjs\");\nvar pptx;\n\nfunction PPTGen() {\n    var xcelData = [];\n    const uploadXLSXFile = () => {\n        const input = document.getElementById('input')\n\n        input.addEventListener('change', () => {\n            readXlsxFile(input.files[0]).then((rows) => {\n                rows.forEach(function (value) {\n                    let playerInfo = {};\n                    if (playerInfo.playerId !== null) {\n                        playerInfo.playerId = value[0];\n                        playerInfo.playerName = value[1];\n                        playerInfo.teamName = value[4];\n                        playerInfo.matches = value[5];\n                        playerInfo.runs = value[6];\n                        playerInfo.ballsFaced = value[7];\n                        playerInfo.strikeRate = isNumber(value[8]);\n                        playerInfo.wickets = value[9];\n                        playerInfo.playingRole = playerInfo.wickets ? 'All Rounder' : 'Batting'\n                        playerInfo.economy = isNumber(value[10]);\n                        playerInfo.bowlOvers = value[11];\n                        playerInfo.battingAverage = isNumber(value[12]);\n                        playerInfo.highestScore = value[13];\n                        playerInfo.bestBowling = ExcelDateToJSDate(value[14]);\n                        playerInfo.hatTricks = value[15];\n                        playerInfo.catches = value[16];\n                        playerInfo.totalPoints = value[17];\n                        playerInfo.batPoints = value[18];\n                        playerInfo.bowlPoints = value[19];\n                        playerInfo.fieldingPoints = value[20];\n                        playerInfo.isExternalPlayer = value[21];\n                        playerInfo.isRetainedPlayer = value[22];\n                        playerInfo.isOwnerPlayer = value[23];\n                        playerInfo.overallRank = value[24];\n                        playerInfo.batRank = value[25];\n                        playerInfo.bowlRank = value[26];\n                        xcelData.push(playerInfo);\n                    }\n                })\n            })\n        })\n    }\n\n    const ExcelDateToJSDate = (date) => {\n        if (date === 0)\n            return \"-\";\n        var d = new Date(Math.round((date - 25568) * 86400 * 1000));\n        return (d.getMonth() + 1) + \"/\" + d.getDate();\n    }\n    const isNumber = (value) => {\n        if (isNaN(value)) {\n            return value;\n        }\n        return parseFloat(value).toFixed(2);\n    }\n\n    const getBasePrice = (playerRank, price40K, price30K, price20K, price10K) => {\n        let basePrice = \"\";\n        if (playerRank >= price10K) {\n            basePrice = \"$ 10,000 /-\";\n        } else if (playerRank >= price20K) {\n            basePrice = \"$ 20,000 /-\";\n        } else if (playerRank >= price30K) {\n            basePrice = \"$ 30,000 /-\";\n        } else if (playerRank >= price40K) {\n            basePrice = \"$ 40,000 /-\";\n        } else {\n            basePrice = \"$ 50,000 /-\";\n        }\n        return basePrice;\n    }\n    const generatePPT = () => {\n        var playersCount = xcelData.length;\n        var price50K = 1;\n        var price40K = price50K + Math.ceil(((playersCount - 1) * 10) / 100);\n        var price30K = price40K + Math.ceil(((playersCount - 1) * 15) / 100);\n        var price20K = price30K + Math.ceil(((playersCount - 1) * 20) / 100);\n        var price10K = price20K + Math.ceil(((playersCount - 1) * 25) / 100);\n        console.log('50K : ' + price50K + ' ;40K : ' + price40K + ' ;30K : ' + price30K\n            + ' ;20K : ' + price20K + ' ;10K : ' + price10K);\n        pptx = new PptxGenJS();\n        for (let i = 0; i < playersCount; i++) {\n\n            let playerInfo = xcelData[i];\n            if (playerInfo.playerId !== 'player_id') {\n                var slide = pptx.addNewSlide();\n                var centerAlignOpts = { x: 1.0, y: 0.2, fontSize: 40, color: '000000', h: 1.4, align: 'center', bold: true };\n                var playerRankOpts = { x: 4.0, y: 1.8, fontSize: 16, color: 'FFFF00', bold: true };\n                var playerBasePriceOpts = { x: 6.7, y: 0.3, fontSize: 20, color: '000000', bold: true, w: 3.3, fill: 'FFFF00' };\n                var playerIdOpts = { x: 4.0, y: 2.1, fontSize: 16, color: 'FFFF00', bold: true };\n                var teamNameOpts = { x: 4.0, y: 2.4, fontSize: 16, color: 'FFFF00', bold: true };\n                var playingRoleOpts = { x: 4.0, y: 2.7, fontSize: 16, color: 'FFFF00', bold: true };\n\n                let matchesX = 1.7;\n                let runsX = 3.4;\n                let wicketsX = 5.1;\n\n                if (playerInfo.wickets) {\n                    matchesX = 0.1;\n                    runsX = 0.7;\n                    wicketsX = 5.5;\n                } else {\n                    matchesX = 2.4;\n                    runsX = 3.7;\n                }\n\n                slide.addImage({ path: bgImage, x: 0, y: 0, w: 10, h: 5.60 })\n\n                if (playerInfo.isRetainedPlayer) {\n                    slide.addImage({ path: retained, x: 1, y: 2.0, w: 2.2, h: 1 })\n                }\n\n                if (playerInfo.isOwnerPlayer) {\n                    slide.addImage({ path: sold, x: 1.2, y: 2.0, w: 2, h: 1 })\n                }\n\n                if (playerInfo.isExternalPlayer) {\n                    // External Player\n                    slide.addText('Associated with Other MN Cricket League(s)', { x: 0, y: 0, fontSize: 10, color: 'C0C0C0', h: 0.3, w: 10, align: 'center', bold: true, fill: 'B22222' });\n                    slide.addText('Associated with Other MN Cricket League(s)', { x: 0, y: 5.33, fontSize: 10, color: 'C0C0C0', h: 0.3, w: 10, align: 'center', bold: true, fill: 'B22222' });\n                }\n\n                // Player Name\n                slide.addText(playerInfo.playerName, centerAlignOpts);\n\n                // Overall Rank\n                slide.addText('Base Price: ' + getBasePrice(playerInfo.overallRank, price40K, price30K, price20K, price10K), playerBasePriceOpts);\n\n                // Overall Rank\n                slide.addText('Overall Rank: ' + playerInfo.overallRank, playerRankOpts);\n\n                // Player ID\n                slide.addText('Player ID: ' + playerInfo.playerId, playerIdOpts);\n                // Team Name\n\n                slide.addText('Team Name: ' + playerInfo.teamName, teamNameOpts);\n                // Playing Role\n\n                slide.addText('Playing Role: ' + playerInfo.playingRole, playingRoleOpts);\n\n                // Batting Stats\n                slide.addText('Batting Stats', { x: runsX, y: 3.5, w: 4.6, fontSize: 16, fill: 'FF8C00', color: '000000', bold: true });\n\n                // Batting Style\n                //slide.addText('Batting Role: ' + playerInfo.battingRole, battingRoleOpts);\n                // Bowling Style\n                //slide.addText('Bowling Role: ' + playerInfo.bowlingRole, bowlingRoleOpts);\n\n                let tableHeaderOptions = { valign: 't', align: 'c', fontFace: 'Arial', border: { pt: 0 } };\n                let tableRowOptions = { valign: 't', align: 'c', fontFace: 'Arial', border: { pt: 0 } };\n\n                // Matches\n                var matchRows = [\n                    [\n                        { text: '(M)', options: tableHeaderOptions }\n                    ]\n                ];\n                let dynamicMatchRows = [{ text: playerInfo.matches, options: tableRowOptions }];\n                matchRows.push(dynamicMatchRows);\n\n                var matchesTabOpts = { x: matchesX, y: 3.8, w: 0.5, rowH: 0.6, fill: '5A81E0', fontSize: 16, color: 'FFFFFF', valign: 'm', bold: true };\n                slide.addTable(matchRows, matchesTabOpts);\n\n                // Runs\n                var runsRows = [\n                    [\n                        { text: 'Rank', options: tableHeaderOptions },\n                        { text: 'Runs', options: tableHeaderOptions },\n                        { text: 'S/R', options: tableHeaderOptions },\n                        { text: 'HS', options: tableHeaderOptions },\n                        { text: 'Ave', options: tableHeaderOptions },\n                        { text: '(C)', options: tableHeaderOptions }\n                    ]\n                ];\n                var dynamicRunsRows = [\n                    { text: playerInfo.batRank, options: tableRowOptions },\n                    { text: playerInfo.runs, options: tableRowOptions },\n                    { text: playerInfo.strikeRate, options: tableRowOptions },\n                    { text: playerInfo.highestScore, options: tableRowOptions },\n                    { text: playerInfo.battingAverage, options: tableRowOptions },\n                    { text: playerInfo.catches, options: tableRowOptions }\n                ];\n\n                runsRows.push(dynamicRunsRows);\n                //runsRows.push([{ text: 'S/R : ' + playerInfo.strikeRate, options: tableRowOptions }]);\n                var runsTabOpts = { x: runsX, y: 3.8, w: 4.6, rowH: 0.6, fill: '5A81E0', fontSize: 16, color: 'FFFFFF', valign: 'm', bold: true };\n                slide.addTable(runsRows, runsTabOpts);\n\n                if (playerInfo.playingRole !== 'Batting') {\n                    // Batting Stats\n                    slide.addText('Bowling Stats', { x: wicketsX, y: 3.5, w: 4.3, fontSize: 16, fill: 'FF8C00', color: '000000', bold: true });\n                    // Wickets\n                    var wicketsRows = [\n                        [\n                            { text: 'Rank', options: tableHeaderOptions },\n                            { text: '(W)', options: tableHeaderOptions },\n                            { text: '(O)', options: tableHeaderOptions },\n                            { text: 'Econ', options: tableHeaderOptions },\n                            { text: 'BB', options: tableHeaderOptions },\n                            { text: 'H/T', options: tableHeaderOptions },\n                        ]\n                    ];\n                    let dynamicWicketsRows = [\n                        { text: playerInfo.bowlRank, options: tableRowOptions },\n                        { text: playerInfo.wickets, options: tableRowOptions },\n                        { text: playerInfo.bowlOvers, options: tableRowOptions },\n                        { text: playerInfo.economy, options: tableRowOptions },\n                        { text: playerInfo.bestBowling, options: tableRowOptions },\n                        { text: playerInfo.hatTricks, options: tableRowOptions },\n                    ];\n                    wicketsRows.push(dynamicWicketsRows);\n                    var wicketsTabOpts = { x: wicketsX, y: 3.8, w: 4.3, rowH: 0.6, fill: '5A81E0', fontSize: 16, color: 'FFFFFF', valign: 'm', bold: true };\n\n                    slide.addTable(wicketsRows, wicketsTabOpts);\n                }\n            }\n        }\n        pptx.save();\n\n        console.log('Complete');\n    }\n\n    return (\n        <div >\n            <div>\n                <div>\n                    <h1 ><center>MTPL Players Slide Generator</center></h1>\n                </div>\n                <div>\n                    <center>\n                        <h1>\n                            <input type=\"file\" id=\"input\" onClick={uploadXLSXFile} />\n                        </h1>\n                    </center>\n                </div>\n\n                <div>\n\n                    <center>\n                        <h1>\n                            <button onClick={generatePPT}>Generate MTPL Slides</button>\n                        </h1>\n                    </center>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default PPTGen;"]},"metadata":{},"sourceType":"module"}