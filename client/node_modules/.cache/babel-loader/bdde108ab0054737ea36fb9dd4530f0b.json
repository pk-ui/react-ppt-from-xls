{"ast":null,"code":"const _ = require('./under-dash');\n\nconst utils = require('./utils'); // constants\n\n\nconst OPEN_ANGLE = '<';\nconst CLOSE_ANGLE = '>';\nconst OPEN_ANGLE_SLASH = '</';\nconst CLOSE_SLASH_ANGLE = '/>';\nconst EQUALS_QUOTE = '=\"';\nconst QUOTE = '\"';\nconst SPACE = ' ';\n\nfunction pushAttribute(xml, name, value) {\n  xml.push(SPACE);\n  xml.push(name);\n  xml.push(EQUALS_QUOTE);\n  xml.push(utils.xmlEncode(value.toString()));\n  xml.push(QUOTE);\n}\n\nfunction pushAttributes(xml, attributes) {\n  if (attributes) {\n    _.each(attributes, (value, name) => {\n      if (value !== undefined) {\n        pushAttribute(xml, name, value);\n      }\n    });\n  }\n}\n\nclass XmlStream {\n  constructor() {\n    this._xml = [];\n    this._stack = [];\n    this._rollbacks = [];\n  }\n\n  get tos() {\n    return this._stack.length ? this._stack[this._stack.length - 1] : undefined;\n  }\n\n  openXml(docAttributes) {\n    const xml = this._xml; // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    xml.push('<?xml');\n    pushAttributes(xml, docAttributes);\n    xml.push('?>\\n');\n  }\n\n  openNode(name, attributes) {\n    const parent = this.tos;\n    const xml = this._xml;\n\n    if (parent && this.open) {\n      xml.push(CLOSE_ANGLE);\n    }\n\n    this._stack.push(name); // start streaming node\n\n\n    xml.push(OPEN_ANGLE);\n    xml.push(name);\n    pushAttributes(xml, attributes);\n    this.leaf = true;\n    this.open = true;\n  }\n\n  addAttribute(name, value) {\n    if (!this.open) {\n      throw new Error('Cannot write attributes to node if it is not open');\n    }\n\n    pushAttribute(this._xml, name, value);\n  }\n\n  addAttributes(attrs) {\n    if (!this.open) {\n      throw new Error('Cannot write attributes to node if it is not open');\n    }\n\n    pushAttributes(this._xml, attrs);\n  }\n\n  writeText(text) {\n    const xml = this._xml;\n\n    if (this.open) {\n      xml.push(CLOSE_ANGLE);\n      this.open = false;\n    }\n\n    this.leaf = false;\n    xml.push(utils.xmlEncode(text.toString()));\n  }\n\n  writeXml(xml) {\n    if (this.open) {\n      this._xml.push(CLOSE_ANGLE);\n\n      this.open = false;\n    }\n\n    this.leaf = false;\n\n    this._xml.push(xml);\n  }\n\n  closeNode() {\n    const node = this._stack.pop();\n\n    const xml = this._xml;\n\n    if (this.leaf) {\n      xml.push(CLOSE_SLASH_ANGLE);\n    } else {\n      xml.push(OPEN_ANGLE_SLASH);\n      xml.push(node);\n      xml.push(CLOSE_ANGLE);\n    }\n\n    this.open = false;\n    this.leaf = false;\n  }\n\n  leafNode(name, attributes, text) {\n    this.openNode(name, attributes);\n\n    if (text !== undefined) {\n      // zeros need to be written\n      this.writeText(text);\n    }\n\n    this.closeNode();\n  }\n\n  closeAll() {\n    while (this._stack.length) {\n      this.closeNode();\n    }\n  }\n\n  addRollback() {\n    this._rollbacks.push({\n      xml: this._xml.length,\n      stack: this._stack.length,\n      leaf: this.leaf,\n      open: this.open\n    });\n  }\n\n  commit() {\n    this._rollbacks.pop();\n  }\n\n  rollback() {\n    const r = this._rollbacks.pop();\n\n    if (this._xml.length > r.xml) {\n      this._xml.splice(r.xml, this._xml.length - r.xml);\n    }\n\n    if (this._stack.length > r.stack) {\n      this._stack.splice(r.stack, this._stack.length - r.stack);\n    }\n\n    this.leaf = r.leaf;\n    this.open = r.open;\n  }\n\n  get xml() {\n    this.closeAll();\n    return this._xml.join('');\n  }\n\n}\n\nXmlStream.StdDocAttributes = {\n  version: '1.0',\n  encoding: 'UTF-8',\n  standalone: 'yes'\n};\nmodule.exports = XmlStream;","map":null,"metadata":{},"sourceType":"script"}