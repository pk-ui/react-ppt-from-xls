{"ast":null,"code":"const TextXform = require('./text-xform');\n\nconst RichTextXform = require('./rich-text-xform');\n\nconst BaseXform = require('../base-xform'); // <rPh sb=\"0\" eb=\"1\">\n//   <t>(its pronounciation in KATAKANA)</t>\n// </rPh>\n\n\nclass PhoneticTextXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      r: new RichTextXform(),\n      t: new TextXform()\n    };\n  }\n\n  get tag() {\n    return 'rPh';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag, {\n      sb: model.sb || 0,\n      eb: model.eb || 0\n    });\n\n    if (model && model.hasOwnProperty('richText') && model.richText) {\n      const r = this.map.r;\n      model.richText.forEach(text => {\n        r.render(xmlStream, text);\n      });\n    } else if (model) {\n      this.map.t.render(xmlStream, model.text);\n    }\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    const name = node.name;\n\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    if (name === this.tag) {\n      this.model = {\n        sb: parseInt(node.attributes.sb, 10),\n        eb: parseInt(node.attributes.eb, 10)\n      };\n      return true;\n    }\n\n    this.parser = this.map[name];\n\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        switch (name) {\n          case 'r':\n            {\n              let rt = this.model.richText;\n\n              if (!rt) {\n                rt = this.model.richText = [];\n              }\n\n              rt.push(this.parser.model);\n              break;\n            }\n\n          case 't':\n            this.model.text = this.parser.model;\n            break;\n\n          default:\n            break;\n        }\n\n        this.parser = undefined;\n      }\n\n      return true;\n    }\n\n    switch (name) {\n      case this.tag:\n        return false;\n\n      default:\n        return true;\n    }\n  }\n\n}\n\nmodule.exports = PhoneticTextXform;","map":null,"metadata":{},"sourceType":"script"}