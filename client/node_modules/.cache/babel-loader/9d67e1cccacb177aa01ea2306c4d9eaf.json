{"ast":null,"code":"var _jsxFileName = \"/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js\";\nimport ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants';\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sheetLoaded: false,\n      players: [],\n      teams: [],\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n    };\n  }\n\n  render() {\n    const populatePlayerInfo = row => {\n      let player = {};\n      player.playerId = 1;\n      player.playerId = 2;\n      return player;\n    };\n\n    const populateTeams = mtplTeams => {\n      let teams = [];\n\n      for (let i = 3; i < mtplTeams.data.length; i++) {\n        let teamInfo = {};\n      }\n\n      return player;\n    };\n\n    const getAuctionData = xcelData => {\n      let auctionData = {};\n\n      for (let i = 0; i < xcelData.length; i++) {\n        switch (xcelData[i].name) {\n          case 'MTPL Players':\n            auctionData.mtplPlayers = xcelData[i];\n            break;\n\n          case 'MTPL Teams':\n            auctionData.mtplTeams = xcelData[i];\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return auctionData;\n    };\n\n    const createPlayerProfile = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \", xcelData.length);\n      let auctionData = getAuctionData(xcelData);\n      console.log('MTPL Players : ', auctionData.mtplPlayers);\n      console.log('MTPL Teams : ', auctionData.mtplTeams);\n      this.setState({\n        players: populatePlayerInfo(auctionData.mtplPlayers)\n      });\n      this.setState({\n        teams: populateTeams(auctionData.mtplTeams)\n      });\n      return React.createElement(\"div\", {\n        className: \"AuctionBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, console.log('Your sheet data : ', this.props.getSheetsData()), React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Previous\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: () => {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: () => {\n          this.props.updateCell('MTPL Players', // sheetName\n          'G', // column\n          4, // row\n          'Sholay - 11', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n          this.props.updateCell('MTPL Players', // sheetName\n          'I', // column\n          4, // row\n          '50000', // value\n          null, // successCallback\n          error => {\n            console.log('error', error);\n          } // errorCallback\n          );\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"update cell!\"));\n    };\n\n    return React.createElement(ReactGoogleSheets, {\n      clientId: Constants.CLIENT_ID,\n      apiKey: Constants.API_KEY,\n      spreadsheetId: Constants.MTPL_MENS_SPREADSHEET_ID,\n      afterLoading: () => this.setState({\n        sheetLoaded: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.state.sheetLoaded ? createPlayerProfile() : 'loading...');\n  }\n\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);","map":{"version":3,"sources":["/Users/a1451224/Documents/PK/Personal/dev/react-ppt-from-xls/client/src/DataComponent.js"],"names":["ReactGoogleSheets","Constants","React","Component","testDataComponent","constructor","props","state","sheetLoaded","players","teams","currentPlayerId","nextPlayerId","prevPlayerId","render","populatePlayerInfo","row","player","playerId","populateTeams","mtplTeams","i","data","length","teamInfo","getAuctionData","xcelData","auctionData","name","mtplPlayers","createPlayerProfile","getSheetsData","console","log","setState","updateCell","error","CLIENT_ID","API_KEY","MTPL_MENS_SPREADSHEET_ID","connect"],"mappings":";AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;;AAEA,MAAMC,iBAAN,SAAgCD,SAAhC,CAA0C;AAExCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,WAAW,EAAE,KADF;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,KAAK,EAAE,EAHI;AAIXC,MAAAA,eAAe,EAAE,EAJN;AAKXC,MAAAA,YAAY,EAAE,EALH;AAMXC,MAAAA,YAAY,EAAE;AANH,KAAb;AASD;;AACDC,EAAAA,MAAM,GAAG;AAEP,UAAMC,kBAAkB,GAAIC,GAAD,IAAS;AAClC,UAAIC,MAAM,GAAG,EAAb;AACAA,MAAAA,MAAM,CAACC,QAAP,GAAkB,CAAlB;AACAD,MAAAA,MAAM,CAACC,QAAP,GAAkB,CAAlB;AAEA,aAAOD,MAAP;AACD,KAND;;AAQA,UAAME,aAAa,GAAIC,SAAD,IAAe;AACnC,UAAIV,KAAK,GAAG,EAAZ;;AACA,WAAI,IAAIW,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACD,SAAS,CAACE,IAAV,CAAeC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACzC,YAAIG,QAAQ,GAAG,EAAf;AACD;;AAED,aAAOP,MAAP;AACD,KAPD;;AASA,UAAMQ,cAAc,GAAIC,QAAD,IAAc;AACnC,UAAIC,WAAW,GAAG,EAAlB;;AACA,WAAI,IAAIN,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGK,QAAQ,CAACH,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrC,gBAAOK,QAAQ,CAACL,CAAD,CAAR,CAAYO,IAAnB;AACE,eAAK,cAAL;AACID,YAAAA,WAAW,CAACE,WAAZ,GAA0BH,QAAQ,CAACL,CAAD,CAAlC;AACA;;AACJ,eAAK,YAAL;AACIM,YAAAA,WAAW,CAACP,SAAZ,GAAwBM,QAAQ,CAACL,CAAD,CAAhC;AACA;;AACJ;AACE;AARJ;AAUD;;AACD,aAAOM,WAAP;AACD,KAfD;;AAiBA,UAAMG,mBAAmB,GAAG,MAAM;AAChC,UAAIJ,QAAQ,GAAG,KAAKpB,KAAL,CAAWyB,aAAX,EAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAAgCP,QAAQ,CAACH,MAAzC;AACA,UAAII,WAAW,GAAGF,cAAc,CAACC,QAAD,CAAhC;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAb,EAAgCN,WAAW,CAACE,WAA5C;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAa,eAAb,EAA8BN,WAAW,CAACP,SAA1C;AAEA,WAAKc,QAAL,CAAc;AAACzB,QAAAA,OAAO,EAAEM,kBAAkB,CAACY,WAAW,CAACE,WAAb;AAA5B,OAAd;AACA,WAAKK,QAAL,CAAc;AAACxB,QAAAA,KAAK,EAAES,aAAa,CAACQ,WAAW,CAACP,SAAb;AAArB,OAAd;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEGY,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,KAAK3B,KAAL,CAAWyB,aAAX,EAAlC,CAFH,EAUE;AAAQ,QAAA,OAAO,EAAE,MAAM,CAEtB,CAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,EAcE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,EAmBE;AAAQ,QAAA,OAAO,EAAE,MAAM,CAEtB,CAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF,EAwBE;AAAQ,QAAA,OAAO,EAAE,MAAM;AACrB,eAAKzB,KAAL,CAAW6B,UAAX,CACE,cADF,EACkB;AAChB,aAFF,EAEO;AACL,WAHF,EAGK;AACH,uBAJF,EAIiB;AACf,cALF,EAKQ;AACLC,UAAAA,KAAD,IAAW;AACTJ,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;AACD,WARH,CAQI;AARJ;AAUA,eAAK9B,KAAL,CAAW6B,UAAX,CACE,cADF,EACkB;AAChB,aAFF,EAEO;AACL,WAHF,EAGK;AACH,iBAJF,EAIW;AACT,cALF,EAKQ;AACLC,UAAAA,KAAD,IAAW;AACTJ,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;AACD,WARH,CAQI;AARJ;AAUD,SArBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAxBF,CADF;AAiDD,KA3DD;;AA6DA,WACE,oBAAC,iBAAD;AACE,MAAA,QAAQ,EAAEnC,SAAS,CAACoC,SADtB;AAEE,MAAA,MAAM,EAAEpC,SAAS,CAACqC,OAFpB;AAGE,MAAA,aAAa,EAAErC,SAAS,CAACsC,wBAH3B;AAIE,MAAA,YAAY,EAAE,MAAM,KAAKL,QAAL,CAAc;AAAE1B,QAAAA,WAAW,EAAE;AAAf,OAAd,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMG,KAAKD,KAAL,CAAWC,WAAX,GAAyBsB,mBAAmB,EAA5C,GAAiD,YANpD,CADF;AAUD;;AAzHuC;;AA4H1C,eAAe9B,iBAAiB,CAACwC,OAAlB,CAA0BpC,iBAA1B,CAAf","sourcesContent":["import ReactGoogleSheets from 'react-google-sheets';\nimport * as Constants from './Constants'\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass testDataComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      sheetLoaded: false,\n      players: [],\n      teams: [],\n      currentPlayerId: '',\n      nextPlayerId: '',\n      prevPlayerId: ''\n\n    }\n  }\n  render() {\n\n    const populatePlayerInfo = (row) => {\n      let player = {};\n      player.playerId = 1;\n      player.playerId = 2;\n\n      return player;\n    }\n\n    const populateTeams = (mtplTeams) => {\n      let teams = [];\n      for(let i=3; i<mtplTeams.data.length; i++ ){\n        let teamInfo = {};\n      }\n\n      return player;\n    }\n\n    const getAuctionData = (xcelData) => {\n      let auctionData = {};\n      for(let i=0; i < xcelData.length; i++) {\n        switch(xcelData[i].name) {\n          case 'MTPL Players':\n              auctionData.mtplPlayers = xcelData[i];\n              break;\n          case 'MTPL Teams':\n              auctionData.mtplTeams = xcelData[i];\n              break;   \n          default:\n            break; \n        }\n      }\n      return auctionData;\n    }\n\n    const createPlayerProfile = () => {\n      let xcelData = this.props.getSheetsData();\n      console.log(\"No of Sheets : \" , xcelData.length);\n      let auctionData = getAuctionData(xcelData);\n      console.log( 'MTPL Players : ', auctionData.mtplPlayers);\n      console.log( 'MTPL Teams : ', auctionData.mtplTeams);\n\n      this.setState({players: populatePlayerInfo(auctionData.mtplPlayers)});\n      this.setState({teams: populateTeams(auctionData.mtplTeams)});\n\n      return (\n        <div className=\"AuctionBody\">\n          {/* Access Data */}\n          {console.log('Your sheet data : ', this.props.getSheetsData())}\n\n\n          { /* this.state.players.push(); */}\n\n\n\n          {/* Previous Player Info*/}\n          <button onClick={() => {\n\n          }}>Previous</button>\n\n          <div>\n\n          </div>\n\n          {/* Next Player Info*/}\n          <button onClick={() => {\n\n          }}>Next</button>\n\n          {/* Update Data */}\n          <button onClick={() => {\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'G', // column\n              4, // row\n              'Sholay - 11', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n            this.props.updateCell(\n              'MTPL Players', // sheetName\n              'I', // column\n              4, // row\n              '50000', // value\n              null, // successCallback\n              (error) => {\n                console.log('error', error)\n              } // errorCallback\n            );\n          }}>update cell!</button>\n        </div>\n      )\n    }\n\n    return (\n      <ReactGoogleSheets\n        clientId={Constants.CLIENT_ID}\n        apiKey={Constants.API_KEY}\n        spreadsheetId={Constants.MTPL_MENS_SPREADSHEET_ID}\n        afterLoading={() => this.setState({ sheetLoaded: true })}\n      >\n        {this.state.sheetLoaded ? createPlayerProfile() : 'loading...'}\n      </ReactGoogleSheets>\n    )\n  }\n}\n\nexport default ReactGoogleSheets.connect(testDataComponent);\n"]},"metadata":{},"sourceType":"module"}