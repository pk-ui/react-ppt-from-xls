{"ast":null,"code":"'use strict';\n\nconst Worksheet = require('./worksheet');\n\nconst DefinedNames = require('./defined-names');\n\nconst XLSX = require('./../xlsx/xlsx');\n\nconst CSV = require('./../csv/csv'); // Workbook requirements\n//  Load and Save from file and stream\n//  Access/Add/Delete individual worksheets\n//  Manage String table, Hyperlink table, etc.\n//  Manage scaffolding for contained objects to write to/read from\n\n\nclass Workbook {\n  constructor() {\n    this.created = new Date();\n    this.modified = this.created;\n    this.properties = {};\n    this._worksheets = [];\n    this.views = [];\n    this.media = [];\n    this._definedNames = new DefinedNames();\n  }\n\n  get xlsx() {\n    if (!this._xlsx) this._xlsx = new XLSX(this);\n    return this._xlsx;\n  }\n\n  get csv() {\n    if (!this._csv) this._csv = new CSV(this);\n    return this._csv;\n  }\n\n  get nextId() {\n    // find the next unique spot to add worksheet\n    for (let i = 1; i < this._worksheets.length; i++) {\n      if (!this._worksheets[i]) {\n        return i;\n      }\n    }\n\n    return this._worksheets.length || 1;\n  }\n\n  addWorksheet(name, options) {\n    const id = this.nextId;\n\n    if (name && name.length > 31) {\n      console.warn(\"Worksheet name \".concat(name, \" exceeds 31 chars. This will be truncated\"));\n    }\n\n    name = (name || \"sheet\".concat(id)).substring(0, 31);\n\n    if (this._worksheets.find(ws => ws && ws.name === name)) {\n      throw new Error(\"Worksheet name already exists: \".concat(name));\n    } // if options is a color, call it tabColor (and signal deprecated message)\n\n\n    if (options) {\n      if (typeof options === 'string') {\n        // eslint-disable-next-line no-console\n        console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { argb: \"rbg value\" } }');\n        options = {\n          properties: {\n            tabColor: {\n              argb: options\n            }\n          }\n        };\n      } else if (options.argb || options.theme || options.indexed) {\n        // eslint-disable-next-line no-console\n        console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { ... } }');\n        options = {\n          properties: {\n            tabColor: options\n          }\n        };\n      }\n    }\n\n    const lastOrderNo = this._worksheets.reduce((acc, ws) => (ws && ws.orderNo) > acc ? ws.orderNo : acc, 0);\n\n    const worksheetOptions = Object.assign({}, options, {\n      id,\n      name,\n      orderNo: lastOrderNo + 1,\n      workbook: this\n    });\n    const worksheet = new Worksheet(worksheetOptions);\n    this._worksheets[id] = worksheet;\n    return worksheet;\n  }\n\n  removeWorksheetEx(worksheet) {\n    delete this._worksheets[worksheet.id];\n  }\n\n  removeWorksheet(id) {\n    const worksheet = this.getWorksheet(id);\n\n    if (worksheet) {\n      worksheet.destroy();\n    }\n  }\n\n  getWorksheet(id) {\n    if (id === undefined) {\n      return this._worksheets.find(Boolean);\n    }\n\n    if (typeof id === 'number') {\n      return this._worksheets[id];\n    }\n\n    if (typeof id === 'string') {\n      return this._worksheets.find(worksheet => worksheet && worksheet.name === id);\n    }\n\n    return undefined;\n  }\n\n  get worksheets() {\n    // return a clone of _worksheets\n    return this._worksheets.slice(1).sort((a, b) => a.orderNo - b.orderNo).filter(Boolean);\n  }\n\n  eachSheet(iteratee) {\n    this.worksheets.forEach(sheet => {\n      iteratee(sheet, sheet.id);\n    });\n  }\n\n  get definedNames() {\n    return this._definedNames;\n  }\n\n  clearThemes() {\n    // Note: themes are not an exposed feature, meddle at your peril!\n    this._themes = undefined;\n  }\n\n  addImage(image) {\n    // TODO:  validation?\n    const id = this.media.length;\n    this.media.push(Object.assign({}, image, {\n      type: 'image'\n    }));\n    return id;\n  }\n\n  getImage(id) {\n    return this.media[id];\n  }\n\n  get model() {\n    return {\n      creator: this.creator || 'Unknown',\n      lastModifiedBy: this.lastModifiedBy || 'Unknown',\n      lastPrinted: this.lastPrinted,\n      created: this.created,\n      modified: this.modified,\n      properties: this.properties,\n      worksheets: this.worksheets.map(worksheet => worksheet.model),\n      sheets: this.worksheets.map(ws => ws.model).filter(Boolean),\n      definedNames: this._definedNames.model,\n      views: this.views,\n      company: this.company,\n      manager: this.manager,\n      title: this.title,\n      subject: this.subject,\n      keywords: this.keywords,\n      category: this.category,\n      description: this.description,\n      language: this.language,\n      revision: this.revision,\n      contentStatus: this.contentStatus,\n      themes: this._themes,\n      media: this.media\n    };\n  }\n\n  set model(value) {\n    this.creator = value.creator;\n    this.lastModifiedBy = value.lastModifiedBy;\n    this.lastPrinted = value.lastPrinted;\n    this.created = value.created;\n    this.modified = value.modified;\n    this.company = value.company;\n    this.manager = value.manager;\n    this.title = value.title;\n    this.subject = value.subject;\n    this.keywords = value.keywords;\n    this.category = value.category;\n    this.description = value.description;\n    this.language = value.language;\n    this.revision = value.revision;\n    this.contentStatus = value.contentStatus;\n    this.properties = value.properties;\n    this._worksheets = [];\n    value.worksheets.forEach(worksheetModel => {\n      const id = worksheetModel.id,\n            name = worksheetModel.name,\n            state = worksheetModel.state;\n      const orderNo = value.sheets && value.sheets.findIndex(ws => ws.id === id);\n      const worksheet = this._worksheets[id] = new Worksheet({\n        id,\n        name,\n        orderNo,\n        state,\n        workbook: this\n      });\n      worksheet.model = worksheetModel;\n    });\n    this._definedNames.model = value.definedNames;\n    this.views = value.views;\n    this._themes = value.themes;\n    this.media = value.media || [];\n  }\n\n}\n\nmodule.exports = Workbook;","map":null,"metadata":{},"sourceType":"script"}