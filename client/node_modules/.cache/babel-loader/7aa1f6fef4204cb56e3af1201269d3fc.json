{"ast":null,"code":"const BaseXform = require('../base-xform'); // Color encapsulates translation from color model to/from xlsx\n\n\nclass ColorXform extends BaseXform {\n  constructor(name) {\n    super(); // this.name controls the xm node name\n\n    this.name = name || 'color';\n  }\n\n  get tag() {\n    return this.name;\n  }\n\n  render(xmlStream, model) {\n    if (model) {\n      xmlStream.openNode(this.name);\n\n      if (model.argb) {\n        xmlStream.addAttribute('rgb', model.argb);\n      } else if (model.theme !== undefined) {\n        xmlStream.addAttribute('theme', model.theme);\n\n        if (model.tint !== undefined) {\n          xmlStream.addAttribute('tint', model.tint);\n        }\n      } else if (model.indexed !== undefined) {\n        xmlStream.addAttribute('indexed', model.indexed);\n      } else {\n        xmlStream.addAttribute('auto', '1');\n      }\n\n      xmlStream.closeNode();\n      return true;\n    }\n\n    return false;\n  }\n\n  parseOpen(node) {\n    if (node.name === this.name) {\n      if (node.attributes.rgb) {\n        this.model = {\n          argb: node.attributes.rgb\n        };\n      } else if (node.attributes.theme) {\n        this.model = {\n          theme: parseInt(node.attributes.theme, 10)\n        };\n\n        if (node.attributes.tint) {\n          this.model.tint = parseFloat(node.attributes.tint);\n        }\n      } else if (node.attributes.indexed) {\n        this.model = {\n          indexed: parseInt(node.attributes.indexed, 10)\n        };\n      } else {\n        this.model = undefined;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseText() {}\n\n  parseClose() {\n    return false;\n  }\n\n}\n\nmodule.exports = ColorXform;","map":null,"metadata":{},"sourceType":"script"}