{"ast":null,"code":"const BaseXform = require('../base-xform');\n\nconst colCache = require('../../../utils/col-cache');\n\nclass DefinedNamesXform extends BaseXform {\n  render(xmlStream, model) {\n    // <definedNames>\n    //   <definedName name=\"name\">name.ranges.join(',')</definedName>\n    //   <definedName name=\"_xlnm.Print_Area\" localSheetId=\"0\">name.ranges.join(',')</definedName>\n    // </definedNames>\n    xmlStream.openNode('definedName', {\n      name: model.name,\n      localSheetId: model.localSheetId\n    });\n    xmlStream.writeText(model.ranges.join(','));\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    switch (node.name) {\n      case 'definedName':\n        this._parsedName = node.attributes.name;\n        this._parsedLocalSheetId = node.attributes.localSheetId;\n        this._parsedText = [];\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  parseText(text) {\n    this._parsedText.push(text);\n  }\n\n  parseClose() {\n    this.model = {\n      name: this._parsedName,\n      ranges: extractRanges(this._parsedText.join(''))\n    };\n\n    if (this._parsedLocalSheetId !== undefined) {\n      this.model.localSheetId = parseInt(this._parsedLocalSheetId, 10);\n    }\n\n    return false;\n  }\n\n}\n\nfunction isValidRange(range) {\n  try {\n    colCache.decodeEx(range);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction extractRanges(parsedText) {\n  const ranges = [];\n  let quotesOpened = false;\n  let last = '';\n  parsedText.split(',').forEach(item => {\n    if (!item) {\n      return;\n    }\n\n    const quotes = (item.match(/'/g) || []).length;\n\n    if (!quotes) {\n      if (quotesOpened) {\n        last += \"\".concat(item, \",\");\n      } else if (isValidRange(item)) {\n        ranges.push(item);\n      }\n\n      return;\n    }\n\n    const quotesEven = quotes % 2 === 0;\n\n    if (!quotesOpened && quotesEven && isValidRange(item)) {\n      ranges.push(item);\n    } else if (quotesOpened && !quotesEven) {\n      quotesOpened = false;\n\n      if (isValidRange(last + item)) {\n        ranges.push(last + item);\n      }\n\n      last = '';\n    } else {\n      quotesOpened = true;\n      last += \"\".concat(item, \",\");\n    }\n  });\n  return ranges;\n}\n\nmodule.exports = DefinedNamesXform;","map":null,"metadata":{},"sourceType":"script"}